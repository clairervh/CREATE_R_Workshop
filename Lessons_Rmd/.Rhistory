# Output for baseline study
basefigpath = "/Users/lindsay/Documents/Brown/Projects/TempEstuarineSedimentN/Isotopes/OutputFigures/Baseline/"
## Run these the first time, and ignore errors (NaNs and plotting errors)
source(paste(Rpath,"AnalyzeThermoblocks.R",sep="")) # Necessary to run the FunctionsPrep script
source(paste(Rpath,"AnalyzeThermoblocks_FunctionsPrep.R",sep=""))
## Load required packages
require(car)
require(data.table)
require(plyr)
require(nlme)
require(lsmeans)
require(multcompView)
##
## Read files (output from AnalyzeThermoblocks_Stats.R)
##
## Field study
## Note removal of NA value in RIS2 Anammox
R2blocksAP <- data.table(read.table(paste(blockfigpath,"Data/R2blocksAP.csv",sep=""),header=TRUE,sep=","))
R2blocksAP[,":="(fDate=as.factor(Date),Rate=lnDenitr,Temp=invTstd)]
R2blocksAAP <- data.table(read.table(paste(blockfigpath,"Data/R2blocksAAP.csv",sep=""),header=TRUE,sep=","))[is.na(lnAmx)==F]
R2blocksAAP[,":="(fDate=as.factor(Date),Rate=lnAmx,Temp=invTstd,ProcDate=paste(Process,Date))]
R2blocksBothAP <- data.table(read.table(paste(blockfigpath,"Data/R2blocksBothAP.csv",sep=""),header=TRUE,sep=","))
R2blocksBothAP[,":="(fDate=as.factor(Date),fProcDate=as.factor(ProcDate),Temp=invTstd,fProcess=as.factor(Process))]
PblocksAP <- data.table(read.table(paste(blockfigpath,"Data/PblocksAP.csv",sep=""),header=TRUE,sep=","))
PblocksAP[,":="(fDate=as.factor(Date),Rate=lnDenitr,Temp=invTstd)]
DenitblocksAP <- data.table(read.table(paste(blockfigpath,"Data/DenitblocksAP.csv",sep=""),header=TRUE,sep=","))
DenitblocksAP[,":="(fDate=as.factor(Date),fSite=as.factor(Site),Rate=lnDenitr,Temp=invTstd,ProcDate=paste(Process,Date))]
AllFieldAP <- rbind(R2blocksAAP[,c("Site","Process","Date","ProcDate","Temp","Rate"),with=F],DenitblocksAP[,c("Site","Process","Date","ProcDate","Temp","Rate"),with=F])
AllFieldAP[,":="(fProcDate=as.factor(ProcDate),fSite=as.factor(Site),fProcess=as.factor(Process))]
## TE
TEblocksAllptsD <- data.table(read.table(paste(blockfigpath,"Data/TEblocksAllptsD.csv",sep=""),header=TRUE,sep=","))
TEblocksAllptsD[,":="(Process="Denitrification",Rate=lnDenit,Temp=invTstd)]
TEblocksAllptsA <- data.table(read.table(paste(blockfigpath,"Data/TEblocksAllptsA.csv",sep=""),header=TRUE,sep=","))
TEblocksAllptsA[,":="(Process="Anammox",Rate=lnAmx,Temp=invTstd)]
TEblocksAll <- rbind(TEblocksAllptsD[,c("Date","Rep","Process","Temp","Rate"),with=F],TEblocksAllptsA[,c("Date","Rep","Process","Temp","Rate"),with=F])
TEblocksAll[,":="(fRepSep=as.factor(paste(Date,Rep,Process,sep="-")),fProcess=as.factor(Process),fTreatment=as.factor(Date))]
# Combined data
tempFieldAP <- AllFieldAP[,c("fProcess","Temp","Rate","fProcDate","fSite"),with=F]
setnames(tempFieldAP,old=c("fProcDate","fSite"),new=c("fRepSep","fTreatment"))
CombinedAP <- rbind(tempFieldAP[is.na(Rate)==F],TEblocksAll[,c("fProcess","Temp","Rate","fRepSep","fTreatment"),with=F])
setnames(CombinedAP,old="fRepSep",new="fProfile")
# For information: Minimum temperature used for anammox in microcosms (Arrhenius/Ea):
#  itKtotC(itKstdtoitK(max(TEblocksAllptsA$Temp)))  # 13.6 deg C
eas[site=="R2" & sitedate!="R2-1005"]
require(data.table)
eas[site=="R2" & sitedate!="R2-1005"]
Comblme1 <- gls(Rate ~ 1 + Temp + fTreatment + fProcess + Temp:fProcess + Temp:fTreatment , method = "REML", data = CombinedAP)
Comblme2 <- lme(Rate ~ 1 + Temp + fTreatment + fProcess + Temp:fProcess + Temp:fTreatment, method = "REML", data = CombinedAP, random = ~1 | fProfile)
Comblme3 <- lme(Rate ~ 1 + Temp + fTreatment + fProcess + Temp:fProcess + Temp:fTreatment, method = "REML", data = CombinedAP, random = ~1 + Temp | fProfile)
summary(Comblme1) # AIC = 1459
summary(Comblme2) # AIC = 374
summary(Comblme3) # AIC = 324
anova(Comblme3,type="marginal")
lmc=lmeControl(niterEM=10000, msMaxIter=10000)  # See Zuur p. 126
TElme1 <- gls(Rate ~ 1 + Temp + fTreatment + fProcess + Temp:fProcess+ Temp:fTreatment , method = "REML", data = TEblocksAll)
TElme2 <- lme(Rate ~ 1 + Temp + fTreatment + fProcess + Temp:fProcess + Temp:fTreatment, method = "REML", data = TEblocksAll, random = ~1 | fRepSep)
TElme3 <- lme(Rate ~ 1 + Temp + fTreatment + fProcess + Temp:fProcess + Temp:fTreatment, method = "REML", data = TEblocksAll, random = ~1 + Temp | fRepSep, control = lmc)
summary(TElme1) # AIC = -23.9...turns out AIC values can be negative.
summary(TElme2) # AIC = -140
summary(TElme3) # AIC = -144.4
anova(TElme1,TElme2,TElme3) # p-value for 2 vs 3 is 0.015
# The best model is the one in which the slope and intercept of the replicates are allowed to vary.
anova(TElme3)
# Temp:fTreatment is not significant: p=0.2126; remove it.
TElme4 <- update(TElme3, .~. -Temp:fTreatment, control=lmc)
summary(TElme4) # AIC = =166
anova(TElme4)  # Temp:fProcess is still significant, as are all other factors.
summary(TElme4) # AIC = =166
0.16174096*0.16174096
0.03765947*0.03765947
summary(Comblme3) # AIC = 324
easTEap
easTEapmean
Toptplot <- read.table(paste(blockfigpath,"Data/Toptplot.csv",sep=""),header=TRUE,sep=",")
ToptplotTE <- read.table(paste(blockfigpath,"Data/ToptplotTE.csv",sep=""),header=TRUE,sep=",")
megaData <- read.table(paste(basefigpath,"megaData.csv",sep=""),header=TRUE,sep=",")
require(multcomp)
require(data.table)
require(ggplot2)
source("/Users/lindsay/Documents/ProgramHelp/R/Functions/lmp.R"); source("/Users/lindsay/Documents/ProgramHelp/R/Functions/pstar.R"); source("/Users/lindsay/Documents/ProgramHelp/R/Functions/r2.R"); source("/Users/lindsay/Documents/ProgramHelp/R/Functions/dig3.R"); source("/Users/lindsay/Documents/ProgramHelp/R/Functions/dig2.R"); source("/Users/lindsay/Documents/ProgramHelp/R/Functions/lmeq2.R"); source("/Users/lindsay/Documents/ProgramHelp/R/Functions/Q10.R")
# Error bars
source("/Users/lindsay/Documents/ProgramHelp/R/Functions/barplot_errbars.R")  # Error bars for barplot - function is error.bar
source("/Users/lindsay/Documents/ProgramHelp/R/Functions/errbarHoriz.R")  # Error bars for barplot - function is error.bar
##
## Find mean and sd of O2 fluxes (baseline study) for dates in this study
##
## Convert from umol cm-2 s-1 to umol cm-2 d-1
##     * 60s/min * 60min/h * 24h/day
TBFo2modR2 <- mean(data.table(megaData)[sitedate %in% c("R2-1101","R2-1106","R2-1107","R2-1109","R2-1203")]$Fo2mod,na.rm=T)*60*60*24
TBFo2modR2sd <- sd(data.table(megaData)[sitedate %in% c("R2-1101","R2-1106","R2-1107","R2-1109","R2-1203")]$Fo2mod,na.rm=T)*60*60*24
TBFo2modP <- mean(data.table(megaData)[sitedate %in% c("P-1106","P-1108","P-1201")]$Fo2mod,na.rm=T)*60*60*24
TBFo2modPsd <- sd(data.table(megaData)[sitedate %in% c("P-1106","P-1108","P-1201")]$Fo2mod,na.rm=T)*60*60*24
tres <- function(data) {x <- data$Temp ; ans <- (x[length(x)]-x[1])/(length(x)-1) ; return(ans)}
tresmean <- mean(c(tres(blockR2_1101),tres(blockR2_1106),tres(blockR2_1107),tres(blockR2_1109),tres(blockR2_1203)))
tressd <- sd(c(tres(blockR2_1101),tres(blockR2_1106),tres(blockR2_1107),tres(blockR2_1109),tres(blockR2_1203)))
tmin <- function(data) {ans <- min(data$Temp) ; return(ans)}
tminmean <- mean(c(tmin(blockR2_1101),tmin(blockR2_1106),tmin(blockR2_1107),tmin(blockR2_1109),tmin(blockR2_1203)))
tminsd <- sd(c(tmin(blockR2_1101),tmin(blockR2_1106),tmin(blockR2_1107),tmin(blockR2_1109),tmin(blockR2_1203)))
tmax <- function(data) {ans <- max(data$Temp) ; return(ans)}
tmaxmean <- mean(c(tmax(blockR2_1101),tmax(blockR2_1106),tmax(blockR2_1107),tmax(blockR2_1109),tmax(blockR2_1203)))
tmaxsd <- sd(c(tmax(blockR2_1101),tmax(blockR2_1106),tmax(blockR2_1107),tmax(blockR2_1109),tmax(blockR2_1203)))
# names(eas)
envtalcols <- c(3,5,7,9,11,12,13,14,17,20,21,22,23,24,25)
# names(eas)[envtalcols]
TBenvtal <- eas[,envtalcols]
##
## Compare some Eas
##
eacomp <- data.table(site=c(rep("R2",10),rep("P",3))
,proc=c(rep("Denit",5),rep("Amx",5),rep("Denit",3))
,group=c(rep("R2-Denit",5),rep("R2-Amx",5),rep("P-Denit",3))
,value=c(eas$Ea[2:6],eas$Ea_A[2:6],eas$Ea[7:9])
,sitedate=c(as.character(eas$sitedate[2:6]),as.character(eas$sitedate[2:6]),as.character(eas$sitedate[7:9]))
)
eacomp2 <- data.table(site=c(rep("R2",10),rep("P",3),rep("TE12S",15))
,proc=c(rep("Denit",5),rep("Amx",5),rep("Denit",3),rep("Denit",15))
,group=c(rep("R2-Denit",5),rep("R2-Amx",5),rep("P-Denit",3),rep("t0",3),rep("4",3),rep("4C",3),rep("17",3),rep("17C",3))  # TE12S with treatment
,group2=c(rep("R2-Denit",5),rep("R2-Amx",5),rep("P-Denit",3),rep("TE12S",15))  # All as TE-12S
,value=c(eas$Ea[2:6],eas$Ea_A[2:6],eas$Ea[7:9],-1*easTEap$Ea[1:3],-1*easTEap$Ea[4:6],-1*easTEap$Ea[7:9],-1*easTEap$Ea[10:12],-1*easTEap$Ea[13:15])
)
summary(aov(value~as.factor(group2),data=eacomp2)) # Not significant when all of TE12S is grouped together
summary(aov(value~as.factor(group),data=eacomp2)) # Not significant when TE12S is broken up by treatment
# Doesn't change (still no sig) if looking only within Denit data
summary(aov(value~as.factor(group),data=eacomp2[proc=="Denit"]))
summary(aov(value~as.factor(group2),data=eacomp2[proc=="Denit"]))
# As above, plus TE-12S anammox
eacomp3 <- data.table(site=c(rep("R2",10),rep("P",3),rep("TE12S",15),rep("TE12S",15))
,proc=c(rep("Denit",5),rep("Amx",5),rep("Denit",3),rep("Denit",15),rep("Amx",15))
,group=c(rep("R2-Denit",5),rep("R2-Amx",5),rep("P-Denit",3),rep("t0-Denit",3),rep("4-Denit",3),rep("4C-Denit",3),rep("17-Denit",3),rep("17C-Denit",3) ,rep("t0-Amx",3),rep("4-Amx",3),rep("4C-Amx",3),rep("17-Amx",3),rep("17C-Amx",3) )  # TE12S with treatment
,group2=c(rep("R2-Denit",5),rep("R2-Amx",5),rep("P-Denit",3),rep("TE12S-Denit",15),rep("TE12S-Amx",15))  # All as TE-12S, but split by process
,value=c(eas$Ea[2:6],eas$Ea_A[2:6],eas$Ea[7:9],-1*easTEap$Ea[1:3],-1*easTEap$Ea[4:6],-1*easTEap$Ea[7:9],-1*easTEap$Ea[10:12],-1*easTEap$Ea[13:15],-1*easTEap$EaA[1:15])
)
eacompTE <- data.table(Ea=c(easTEap$Ea,easTEap$EaA)
,Process=c(rep("Denit",15),rep("Amx",15))
,Treatment=as.character(rep(easTEap$Treatment,2))
,C=rep(easTEap$C,2)
,Temp=rep(easTEap$Temp,2)
)
eacomp2
eacompshort <- data.table(Experiment=c(rep("RI",5),rep("TE12S",15))
,Treatment=c(as.character(eas$site[2:6]),as.character(easTEap$Treatment))
,Ea=c((-1*eas$Ea[2:6]),easTEap$Ea)
,EaA=c((-1*eas$Ea_A[2:6]),easTEap$EaA)
,Color=c(R01col,R06col,R07col,R09col,R03col,rep(col0,3),rep(col4,3),rep(col4C,3),rep(col17,3),rep(col17C,3))
,Pch=c(rep(19,5),rep(21,15))
)
eacompshortmean <- data.table(Experiment=c(rep("RI",5),rep("TE12S",5))
,Treatment=c(as.character(eas$site[2:6]),as.character(easTEapmean$Treatment))
,Ea=c((-1*eas$Ea[2:6]),easTEapmean$Ea)
,EaA=c((-1*eas$Ea_A[2:6]),easTEapmean$EaA)
,Color=c(R01col,R06col,R07col,R09col,R03col,col0,col4,col4C,col17,col17C)
,Pch=c(rep(19,5),rep(19,5))
)
eacompshort
eacompshortmean
summary(Comblme3) # AIC = 324
exp(0.16)
ln(1.17)
log(1.17)
anova(Comblme3) # AIC = 324
summary(Comblme3) # AIC = 324
anova(Comblme3,type="marginal")
exp(1.04)
library(nlme)
nlme
installed.packages()
names(installed.packages())
colnames(installed.packages())
filter(installed.packages(),Package=="nlme")
test <- installed.packages()
test
names(test)
str(test)
as.data.frame(test)
test <- as.data.frame(test)
names(test)
filter(test,Package=="nlme")
require(dplyr)
filter(test,Package=="nlme")
sessionInfo()
?rnorm
rnorm(18, mean=0.11, sd=3)
rnorm(18, mean=0.11, sd=2)
plot(rnorm(18, mean=0.11, sd=2))
plot(rnorm(18, sd=2))
1
plot(rnorm(18, mean=0.11, sd=1))
test <- rnorm(18, mean=0.11, sd=1)
plot(test)
test <- rnorm(18, mean=0.11, sd=1)
plot(test)
plot(test/3)
test <- rnorm(18, mean=110, sd=1)
plot(test)
test <- rnorm(18, mean=110, sd=1)
plot(test)
test <- rnorm(18, mean=110, sd=2)
plot(test, las=1)
test <- rnorm(18, mean=110, sd=3)
plot(test, las=1)
test <- rnorm(18, mean=110, sd=3)
plot(test, las=1)
test
test/1000
test <- test/1000
plot(test)
plot(test, las=1)
test[1:6] <- test[1:6] + 0.006
test[13:18] <- test[13:18] + 0.102
plot(test, las=1)
treatments <- factor(rep(1,6),rep(2,6),rep(3,6))
treatments <- factor(c(rep(1,6),rep(2,6),rep(3,6)))
treatments
summary(aov(test~treatments))
TukeyHSD(aov(test~treatments))
test.mod <- aov(test~treatments)
test.mod
plot(resid(test.mod))
plot(test.mod)
View(test)
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
Absorbance <- read.csv(file="../Data/Nitrification_Absorbances.csv", stringsAsFactors=TRUE, header=TRUE)
str(Absorbance)
plot(Concentration ~ Absorbance, data=Absorbance)
plot(Standard Concentration ~ Absorbance, data=Absorbance)
plot(StandardConcentration ~ Absorbance, data=Absorbance)
plot(StandardConc ~ Absorbance, data=Absorbance)
plot(StandardConc ~ Absorbance, data=Absorbance, las=1, pch=19)
plot(StandardConc ~ Absorbance, data=absorbances, las=1, pch=19, xlim=c(0,0.6), ylim=c(0,6))
plotAbsorbanceData <- function(absorbances) {
plot(StandardConc ~ Absorbance, data=absorbances, las=1, pch=19, xlim=c(0,0.6), ylim=c(0,6))
}
NitrifAbsorbance <- read.csv(file="../Data/Nitrification_Absorbances.csv", stringsAsFactors=TRUE, header=TRUE)
```
rm(Absorbance)
plotAbsorbanceData <- function(absorbances) {
plot(StandardConc ~ Absorbance, data=absorbances, las=1, pch=19, xlim=c(0,0.6), ylim=c(0,6))
}
plotAbsorbanceData(NitrifAbsorbance)
calib.lm <- lm(yvals~xvals)
absorbances <- NitrifAbsorbance
xvals <- absorbances$Absorbance
yvals <- absorbances$StandardConc
calib.lm <- lm(yvals~xvals)
summary(calib.lm)
summary(calib.lm)$coefficients
summary(calib.lm)$coefficients["(Intercept)", "Estimate"]
intercept
slope <- summary(calib.lm)$coefficients["xvals", "Estimate"]
intercept <- summary(calib.lm)$coefficients["(Intercept)", "Estimate"]
plot(yvals~xvals)
yvals
xvals
absorbances
filter(absorbances,Type=="Standard")$Absorbance
findCalibEquation <- function(absorbances){
xvals <- filter(absorbances,Type=="Standard")$Absorbance
yvals <- filter(absorbances,Type=="Standard")$StandardConc
calib.lm <- lm(yvals~xvals)
intercept <- summary(calib.lm)$coefficients["(Intercept)", "Estimate"]
slope <- summary(calib.lm)$coefficients["xvals", "Estimate"]
return(data.frame(Slope=slope, Intercept=intercept))
}
findCalibEquation(NitrifAbsorbance)
attributes(summary(calib.lm))
summary(calib.lm)$adj.r.squared
findCalibEquation <- function(absorbances){
xvals <- filter(absorbances,Type=="Standard")$Absorbance
yvals <- filter(absorbances,Type=="Standard")$StandardConc
calib.lm <- lm(yvals~xvals)
intercept <- summary(calib.lm)$coefficients["(Intercept)", "Estimate"]
slope <- summary(calib.lm)$coefficients["xvals", "Estimate"]
adjr2 <- summary(calib.lm)$adj.r.squared
print(adjr2)
return(data.frame(Slope=slope, Intercept=intercept))
}
findCalibEquation <- function(absorbances){
# Pull out x and y values for the linear regression
xvals <- filter(absorbances,Type=="Standard")$Absorbance
yvals <- filter(absorbances,Type=="Standard")$StandardConc
# Fit the linear regression model, and extract coefficients and adjusted r2
calib.lm <- lm(yvals~xvals)
intercept <- summary(calib.lm)$coefficients["(Intercept)", "Estimate"]
slope <- summary(calib.lm)$coefficients["xvals", "Estimate"]
adjr2 <- summary(calib.lm)$adj.r.squared
# Print adjusted r2
print(adjr2)
# Return slope and intercept for future calibration calculations
return(data.frame(Slope=slope, Intercept=intercept))
}
findCalibEquation(NitrifAbsorbance)
print(paste("The adjusted r2 is ",adjr2, sep=""))
adjr2 <- summary(calib.lm)$adj.r.squared
print(paste("The adjusted r2 is ",adjr2, sep=""))
print(paste("The adjusted r2 is ",round(adjr2,2), sep=""))
print(paste("The adjusted r2 is ",round(adjr2,2),".", sep=""))
print(paste(expression("The adjusted r2 is "),round(adjr2,3),".", sep=""))
print(paste(expression("The adjusted r"^"2"*" is "),round(adjr2,3),".", sep=""))
print(expression(paste("test", "test")))
findCalibEquation <- function(absorbances){
# Pull out x and y values for the linear regression
xvals <- filter(absorbances,Type=="Standard")$Absorbance
yvals <- filter(absorbances,Type=="Standard")$StandardConc
# Fit the linear regression model, and extract coefficients and adjusted r2
calib.lm <- lm(yvals~xvals)
intercept <- summary(calib.lm)$coefficients["(Intercept)", "Estimate"]
slope <- summary(calib.lm)$coefficients["xvals", "Estimate"]
adjr2 <- summary(calib.lm)$adj.r.squared
# Print adjusted r2
print(paste("The adjusted r2 is ",round(adjr2,3),".", sep=""))
# Return slope and intercept for future calibration calculations
return(data.frame(Slope=slope, Intercept=intercept))
}
findCalibEquation(NitrifAbsorbance)
test <- findCalibEquation(NitrifAbsorbance)
test
test[1]
test[1]*2
test[1]*2+test[1]
test[1]*2+test[2]
slope <- slopeIntVector$Slope
intercept <- slopeIntVector$Intercept
slopeIntVector <- test
slope <- slopeIntVector$Slope
intercept <- slopeIntVector$Intercept
slope
intercept
absorbances
str(absorbances)
CalcConc <- function(slopeIntdf, absorbances){
# Extract slope and intercept from data frame output of findCalibEquation
slope <- slopeIntdf$Slope
intercept <- slopeIntdf$Intercept
# Take input data frame, select samples only, calculate concentration from absorbance,
# and create a data frame with only the sample ID and concentrations
outputdf <- absorbances %>%
filter(Type == "Sample") %>%
mutate(Concentration = Absorbance * slope + intercept) %>%
select(SampleID, Concentration)
# Return this data frame
return(outputdf)
}
CalcConc(calibCoeffs, NitrifAbsorbance)
(calibCoeffs <- findCalibEquation(NitrifAbsorbance))
CalcConc(calibCoeffs, NitrifAbsorbance)
rm(calibCoeffs)
(CalibCoeffs <- findCalibEquation(NitrifAbsorbance))
SampleConcentrations <- CalcConc(CalibCoeffs, NitrifAbsorbance)
write.csv(SampleConcentrations, file="Data_Output/SampleConcentrations.csv",row.names=FALSE)
write.csv(SampleConcentrations, file="../Data_Output/SampleConcentrations.csv",row.names=FALSE)
?left_join
SampleInventory <- read.csv(file="../Data/Sample_Inventory.csv", stringsAsFactors=TRUE, header=TRUE)
NitrateConcentrations <- read.csv(file="../Data_Output/SampleConcentrations.csv", stringsAsFactors=TRUE, header=TRUE)
NitrateConcentrations <- NitrateConcentrations %>% left_join(SampleInventory, by=SampleID)
NitrateConcentrations <- NitrateConcentrations %>% left_join(SampleInventory, by="SampleID")
NitrateConcentrations
plot(Concentration ~ Location, data=NitrateConcentrations, las=1)
plot(Concentration ~ Location, data=NitrateConcentrations, las=1, ylab=c(0,2))
plot(Concentration ~ Location, data=NitrateConcentrations, las=1, ylim=c(0,2))
plot(Concentration ~ Location, data=NitrateConcentrations, las=1, ylim=c(0,1.5))
plot(Concentration ~ Location, data=NitrateConcentrations, las=1, ylim=c(0,1.2))
plot(Concentration ~ Location, data=NitrateConcentrations, las=1, ylim=c(0,1.5))
plot(Concentration ~ Location, data=NitrateConcentrations, las=1)
Nitrate.mod <- aov(Concentration ~ Location, data=NitrateConcentrations)
summary(Nitrate.mod)
m <- par(mfrow=c(2,2))
m
par(m)
(par(m))
m <- par(mfrow=c(2,2))  # Set layout to be 2 x 2
plot(Nitrate.mod)  # Residual plots
par(m)  # Reset layout
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
nutrients <- read.csv(file="../Data/Experiment_nutrients.csv")
carbon <- read.csv(file="Data/Experiment_carbon.csv")
carbon <- read.csv(file="../Data/Experiment_carbon.csv")
nutrients %>%
semi_join(y=carbon, by=c("Treatment", "Replicate"))
nutrients %>%
left_join(y=carbon, by=c("Treatment", "Replicate"))
nutrients %>%
semi_join(y=carbon, by=c("Treatment"))
nutrients %>%
left_join(y=carbon, by=c("Treatment"))
xvalues <- seq(1:100)
yvalues <- rnorm(mean=5, sd=2) # This creates a vector of normally-distributed values
yvalues <- rnorm(100, mean=5, sd=2) # This creates a vector of 100 normally-distributed values
plot(xvalues, yvalues)
plotData <- data.frame(xvalues=seq(1:100),
yvalues=rnorm(mean=5, sd=2) # This creates a vector of normally-distributed values
)
plotData <- data.frame(xvalues=seq(1:100),
yvalues=rnorm(100, mean=5, sd=2) # Creates a vector of 100 normally-distributed values
)
plot(plotData$xvalues, plotData$yvalues)
?plot
# Apple height in cm
appleHeight <- rnorm(100, mean=7.5, sd=2)  # This creates a vector of 100 normally-distributed values with mean 7.5
# Apple weight in g
appleWeight <- rnorm(100, mean=90, sd=2)
plot(appleHeight, appleWeight)
seq(0.8, 1.2, out=100)
seq(0.8, 1.2, length.out=100)
?jitter
jitter(seq(0.8, 1.2, length.out=100))
plot(c(1:100), jitter(seq(0.8, 1.2, length.out=100)))
?jitter
plot(c(1:100), jitter(seq(0.8, 1.2, length.out=100), amount=1))
plot(c(1:100), jitter(seq(0.8, 1.2, length.out=100), amount=0.5))
plot(c(1:100), jitter(seq(0.8, 1.2, length.out=100), amount=0.2))
plot(c(1:100), jitter(seq(0.8, 1.2, length.out=100), amount=0.1))
# Apple height in cm, generally increasing but with some scatter
appleHeight <- jitter(seq(7, 8.5, length.out=100), amount=0.1)
# Apple weight in g
appleWeight <- jitter(seq(80, 100, length.out=100), amount=0.1)
plot(appleHeight, appleWeight)
appleWeight <- jitter(seq(80, 100, length.out=100), amount=0.2)
plot(appleHeight, appleWeight)
appleHeight <- jitter(seq(7, 8.5, length.out=100), amount=0.2)
appleWeight <- jitter(seq(80, 100, length.out=100), amount=0.2)
plot(appleHeight, appleWeight)
appleHeight <- jitter(seq(7, 8.5, length.out=100), amount=0.4)
appleHeight
plot(appleHeight, appleWeight)
appleWeight <- jitter(seq(80, 100, length.out=100), amount=0.4)
plot(appleHeight, appleWeight)
plotData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(10, 12, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(2, 3, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Cantaloupe", 100))
yvalues=rnorm(100, mean=5, sd=2) # Creates a vector of 100 normally-distributed values
)
plotData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(10, 12, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(2, 3, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Cantaloupe", 100))
)
fruitData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(10, 12, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(2, 3, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Cantaloupe", 100))
)
rm(plotData)
plot(fruitData$fruitWeight, fruitData$fruitHeight)
appleHeight
fruitData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(8, 9, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(115, 125, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Cantaloupe", 100))
)
plot(fruitData$fruitWeight, fruitData$fruitHeight)
plot(fruitData$fruitHeight, fruitData$fruitWeight)
plot(fruitWeight ~ fruitHeight, data=fruitData)
plot(fruitWeight ~ fruitHeight, data=filter(fruitData, fruitType=="pear"))
filter(fruitData, fruitType=="pear")
str(fruitData)
fruitData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(8, 9, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(115, 125, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Pear", 100))
)
plot(fruitData$fruitHeight, fruitData$fruitWeight)
plot(fruitWeight ~ fruitHeight, data=filter(fruitData, fruitType=="Pear"))
head(appleHeight)
head(fruitData)
str(fruitData)
barplot(nutrients_mean %>%
select(Ammonium, Nitrate, Nitrite) %>%
as.matrix() )
nutrients_mean <- nutrients %>%
group_by(Treatment) %>%
summarize(Ammonium=mean(Ammonium), Nitrate=mean(Nitrate), Nitrite=mean(Nitrite))
nutrients_mean
barplot(nutrients_mean %>%
select(Ammonium, Nitrate, Nitrite) %>%
as.matrix() )
legend()
B <- barplot(nutrients_mean %>%
select(Ammonium, Nitrate, Nitrite) %>%
as.matrix() )
B
attributes(B)
nutrients_mean
?legend
legend("topright", pch=22, col="black", bg=c("gray20", "gray80"))
legend("topright", pch=22, col="black", bg=c("gray20", "gray80"), legend=c("Treatment 1", "Treatment 2"))
legend("topright", pch=22, col="black", pch.bg=c("gray20", "gray80"), legend=c("Treatment 1", "Treatment 2"))
?legend
legend("topright", pch=22, col="black", pt.bg=c("gray20", "gray80"), legend=c("Treatment 1", "Treatment 2"))
gray.colors(2)
legend("topright", pch=22, col="black", pt.bg=gray.colors(2), legend=c("Treatment 1", "Treatment 2"))
?pdf
barplot(nutrients_mean %>%
select(Ammonium, Nitrate, Nitrite) %>%
as.matrix()
, beside=TRUE, space=c(0.1,1), ylim=c(0,10), las=1)
legend("topright", pch=22, col="black", pt.bg=gray.colors(2), legend=c("Treatment 1", "Treatment 2"))
pdf("../Output/mygraph.pdf", height=11, width=8.5, pointsize=12)
pdf("../Figures/mygraph.pdf", height=11, width=8.5, pointsize=12)
par(omi=c(7,0.5,1,1), mar=c(5,5,0,0), mfrow=c(1,2))
# Make ammonium plot
plot(100, 100, xlim=c(0,5), ylim=c(0, 14), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1, line=2)
axis(2, pos=0, las=1)
mtext(text=expression("Ammonium concentration ("*mu*"mol L"^"-1"*")"), side=2, line=2)
points(Ammonium ~ Nitrate, data=nutrients, pch=19, col="red")
# Make nitrite plot
plot(100, 100, xlim=c(0,5), ylim=c(0, 14), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1, line=2)
axis(2, pos=0, las=1)
mtext(text=expression("Nitrite concentration ("*mu*"mol L"^"-1"*")"), side=2, line=2)
points(Nitrite ~ Nitrate, data=nutrients, pch=19, col="blue")
dev.list()
dev.off(3)
dev.off(4)
