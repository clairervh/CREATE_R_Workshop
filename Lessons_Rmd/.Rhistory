#   Use ideal gas law to calculate moles N2O per 20 mL sample (n = pV/RT, see above)
#   mg N per sample = moles N2O per 20 mL * 28.0134 g N/mol N2O * 1000 mg/1 g
# Option 2:
#   Divide total headspace moles N2O by volume of headspace (L) = moles N2O per L
#   Multiply by 0.02 = moles per 20 mL
#   moles N2O per 20 mL * 28.0134 g N/mol N2O * 1000 mg/1 g = mg N
# Option 1:
data$SamplemgN <- ( 1*(data$N2O * 0.02 / 1e6)/(0.08205746*(data$Temperature+273.15)) ) * 28.0134 * 1000 # mg N per sample
data$SamplemgC <- ( 1*(data$CO2 * 0.02 / 1e6)/(0.08205746*(data$Temperature+273.15)) ) * 12.0107 * 1000 # mg C per sample
data$SamplemgCCH4 <- ( 1*(data$CH4 * 0.02 / 1e6)/(0.08205746*(data$Temperature+273.15)) ) * 12.0107 * 1000 # mg C per sample
# Check with Option 2:
#           data$SamplemgN2 <- ( data$HeadspaceMolesN2O / data$Headspace * 0.02) * 28.0134 * 1000
#           data$SamplemgC2 <- ( data$HeadspaceMolesCO2 / data$Headspace * 0.02) * 12.0107 * 1000
#           data$SamplemgN/data$SamplemgN2  # Should be all 1s and NAs
# Convert from mg N removed in sample to mg N per kg soil removed in sample
data$SamplemgNperkg <- data$SamplemgN / (data$SoilDryWt/1000)  # sample mg N per kg soil
data$SamplemgCperkg <- data$SamplemgC / (data$SoilDryWt/1000)  # sample mg C per kg soil
data$SamplemgCCH4perkg <- data$SamplemgCCH4 / (data$SoilDryWt/1000)  # sample mg C per kg soil
# Find mg N removed by sampling at previous timepoints
data$PrevRemovedN <- NA                                   # Make a column for N removed by previous samples, in mg N per kg soil
data$PrevRemovedC <- NA                                   # Make a column for C-CO2 removed by previous samples, in mg C per kg soil
data$PrevRemovedCCH4 <- NA                                # Make a column for C-CH4 removed by previous samples, in mg C per kg soil
# Go through each line of the data file.
# Given the Datecode and Jar of that line,
#     PrevRemovedN is the sum all values of "N in this sample" for previous timepoints (Timepoint < Timepoint of that line)
for (j in (1:length(data$Jar))) {
jar <- as.character(data$Jar[j])
timepoint <- data$Timepoint[j]
datecode <- data$Datecode[j]
data$PrevRemovedN[j] <- sum(data[Jar==data$Jar[j] & Timepoint<data$Timepoint[j] & Datecode==data$Datecode[j]]$SamplemgNperkg)  # Sum of sample N (mg/kg) for samples w/in the same jar with timepoints less than this one
data$PrevRemovedC[j] <- sum(data[Jar==data$Jar[j] & Timepoint<data$Timepoint[j] & Datecode==data$Datecode[j]]$SamplemgCperkg)  # Sum of sample C-CO2 (mg/kg) for samples w/in the same jar with timepoints less than this one
data$PrevRemovedCCH4[j] <- sum(data[Jar==data$Jar[j] & Timepoint<data$Timepoint[j] & Datecode==data$Datecode[j]]$SamplemgCCH4perkg)  # Sum of sample C-CH4 (mg/kg) for samples w/in the same jar with timepoints less than this one
}
#-------------------------------------#
# Account for dissolved N2O           #
# Final variable: data$DissolvedN2O   #
#-------------------------------------#
## Dissolved N2O in mol
## For each line, find dissolved N2O using the function
##    DissolvedN2O (in DissolvedN2O.R)
##    Function inputs: water volume (L), N2O concentration (uL/L), temperature (C)
## Then, multiply by 28.0134 g N/mol N2O * 1000 mg/1 g to get mg N
## And divide by dry soil weight in kg (data$SoilDryWt/1000) to get mg N/kg soil
data$DissolvedN2O <- NA
data$DissolvedN2O <- DissolvedN2O(data$WaterVolume,data$N2O,data$Temperature) * 28.0134 * 1000 / (data$SoilDryWt/1000)
## Dissolved CO2 in mol
## For each line, find dissolved CO2 using the function
##    DissolvedCO2 (in DissolvedCO2.R)
##    Function inputs: water volume (L), CO2 concentration (uL/L), temperature (C), pH
## Then, multiply by 44.0095 g CO2/mol CO2 * 1000 mg/1g to get mg C
## And divide by dry soil weight in kg (data$SoilDryWt/1000) to get mg N/kg soil
data$DissolvedCO2 <- 0
data$DissolvedCO2 <- DissolvedCO2(CO2conc=data$CO2,pH=SDSoilpH,Temp=data$Temperature,watervol=data$WaterVolume) * 44.0095 * 1000 / (data$SoilDryWt/1000)
## Consider doing this.
data$DissolvedCH4 <- 0 # CORRECT THIS!!!
#-----------------------------------------------------------------#
# Find total N that has been produced up to that timepoint        #
#  (in units of mg N per kg soil)                                 #
# By summing:                                                     #
#   N in headspace at that timepoint (calculated from sample)     #
#   N removed by previous samples                                 #
#   N dissolved in soil water at that timepoint                   #
# Final variable: data$TimepointNmgperkg
#-----------------------------------------------------------------#
data$TimepointN <- data$mgNperkg + data$PrevRemovedN + data$DissolvedN2O  # TimepointN is in mg per kg soil
data$TimepointC <- data$mgCperkg + data$PrevRemovedC + data$DissolvedCO2  # TimepointC is in mg per kg soil
data$TimepointCCH4 <- data$mgCCH4perkg + data$PrevRemovedCCH4 + data$DissolvedCH4  # TimepointCCH4 is in mg per kg soil
return(data)
}
# To examine the dissolved CO2 output:
#   View(SD13Denit[,c("Datecode","Jar","Timepoint","CO2","WaterVolume","Temperature","DissolvedCO2","mgCperkg","PrevRemovedC","TimepointC"),with=F])
#   # Plots linear regressions to see how the slopes are additive, although linear regressions are not used to calculate rates
#   plotDissCO2 <- function(datecode,jar) {
#     plot(mgCperkg~Hour,data=SD13Denit[Jar==jar & Datecode==datecode],ylim=c(0,14),las=1)  # CO2 in headspace
#       abline(lm(mgCperkg~Hour,data=SD13Denit[Jar==jar & Datecode==datecode]))
#     points(DissolvedCO2~Hour,data=SD13Denit[Jar==jar & Datecode==datecode],col="blue")  # Dissolved CO2
#       abline(lm(DissolvedCO2~Hour,data=SD13Denit[Jar==jar & Datecode==datecode]),col="blue")
#     points((DissolvedCO2+mgCperkg)~Hour,data=SD13Denit[Jar==jar & Datecode==datecode],col="red")  # Sum of these two
#       abline(lm((DissolvedCO2+mgCperkg)~Hour,data=SD13Denit[Jar==jar & Datecode==datecode]),col="red")
#   }
#   plotDissCO2("SD13.8","1A")
##------------------------------------------------##
## Read in GC data files                          ##
##    Add some data/variables                     ##
##    Calculate N/C produced for each timepoint   ##
##------------------------------------------------##
# Read in and add timepoints and total jar volumes
SD13Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SD13 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left")
SD13Denit$Datecode <- as.character(SD13Denit$Datecode)  # Otherwise the join fails later, because Datecode has to be the same type in both datasets
SR13Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SR13 Respiration.csv",sep=""),sep=",",header=T)),MinuteTimepointsSummer,by=c("Minutes"),type="left")
SR13Denit$Datecode <- as.character(SR13Denit$Datecode)
SR13Denit[,":="(Hour=Minutes/60)]
SR13Denit[Jar=="Blank"|Jar=="Standard",":="(WaterVolume=0,Temperature=0)]  # To keep DissolvedCO2 from bombing
SD14Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SD14 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left")
SD14Denit$Datecode <- as.character(SD14Denit$Datecode)
SR14Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SR14 Respiration.csv",sep=""),sep=",",header=T)),MinuteTimepointsSummer,by=c("Minutes"),type="left")
SR14Denit$Datecode <- as.character(SR14Denit$Datecode)
SR14Denit[,":="(Hour=Minutes/60)]
SR14Denit[Jar=="Blank"|Jar=="Standard",":="(WaterVolume=0,Temperature=0)]  # To keep DissolvedCO2 from bombing
# Add: SoilDryWt, SoilVolume, WaterVolume and Temperature
#   Volumes from "Denit_SD13_JarWeights.R" are in L
#   Soil dry weight is in g
setnames(JarVolsWeights,old="DryWt",new="SoilDryWt")
SD13Denit <- join(SD13Denit,JarVolsWeights,by=c("Datecode","Jar"),type="left")  # Note that this is by Jar rather than Location because there are two jars/location (acetylene and compressed air)
# SR13
setkey(SR13Denit,Datecode,Jar)
SR13Denit[setkey(SR13JarWeights,Datecode,Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SD14
setkey(SD14Denit,Datecode,Jar)
SD14Denit[setkey(SD14JarWeights,Datecode,Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14
setkey(SR14Denit,Datecode,Jar)
SR14Denit[setkey(SR14JarWeights,Datecode,Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14.3 Jar 5 was incubated with an iButton, so I need to subtract this volume from the headspace.
# To do this, I am adding it to the SoilVolume here, before CalcNProdn (SoilDryWt has already been
#  calculated anyhow, and SoilVolume is only used to calculate Headspace).
SR14Denit[Datecode=="SR14.3" & Jar=="5",":=" (SoilVolume=SoilVolume+0.00062)]
# Calculate N or C produced at each timepoint
SD13Denit <- CalcNProdn(SD13Denit)
SR13Denit <- CalcNProdn(SR13Denit)
SD14Denit <- CalcNProdn(SD14Denit)
SR14Denit <- CalcNProdn(SR14Denit)
names(SD13Denit)
View(SD13Denit)
SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
library(dplyr)
SD13Denit <- SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
SD13Denit %>% select(mgCperkg)
SD13Denit %>% select(Location)
SD13Denit %>% View()
join(data.table(read.csv(paste(SD13DenitInputPath,"SD13 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left") %>% names()
JarVolsWeights
SD13Denit$Location
which(names(SD13Denit)=="Location")
which(SD13Denit[,6]!=SD13Denit[,19])
SD13Denit[,6]
SD13Denit[,9]
SD13Denit[9]
SD13Denit[,"Location"]
SD13Denit[,9, with = F]
SD13Denit[,6, with = F]
which(SD13Denit[,6, with = F]!=SD13Denit[,19, with = F])
select(JarVolsWeights, -Location)
select(JarVolsWeights, -Location)
SR13JarWeights
SD13Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SD13 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left")
SD13Denit$Datecode <- as.character(SD13Denit$Datecode)  # Otherwise the join fails later, because Datecode has to be the same type in both datasets
SR13Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SR13 Respiration.csv",sep=""),sep=",",header=T)),MinuteTimepointsSummer,by=c("Minutes"),type="left")
SR13Denit$Datecode <- as.character(SR13Denit$Datecode)
SR13Denit[,":="(Hour=Minutes/60)]
SR13Denit[Jar=="Blank"|Jar=="Standard",":="(WaterVolume=0,Temperature=0)]  # To keep DissolvedCO2 from bombing
SD14Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SD14 Denitrification.csv",sep=""),sep=",",header=T)),HourTimepoints,by=c("Hour"),type="left")
SD14Denit$Datecode <- as.character(SD14Denit$Datecode)
SR14Denit <- join(data.table(read.csv(paste(SD13DenitInputPath,"SR14 Respiration.csv",sep=""),sep=",",header=T)),MinuteTimepointsSummer,by=c("Minutes"),type="left")
SR14Denit$Datecode <- as.character(SR14Denit$Datecode)
SR14Denit[,":="(Hour=Minutes/60)]
SR14Denit[Jar=="Blank"|Jar=="Standard",":="(WaterVolume=0,Temperature=0)]  # To keep DissolvedCO2 from bombing
# Add: SoilDryWt, SoilVolume, WaterVolume and Temperature
#   Volumes from "Denit_SD13_JarWeights.R" are in L
#   Soil dry weight is in g
# The match is done by Datecode and Jar, and the data frame already has the variable Location, so the redundant Location is removed from JarVolsWeights.
# Note that matching is by Jar rather than Location because there are two jars/location (acetylene and compressed air)
setnames(JarVolsWeights, old="DryWt", new="SoilDryWt")
SD13Denit <- join(SD13Denit,select(JarVolsWeights, -Location),by=c("Datecode","Jar"),type="left")
# SR13
setkey(SR13Denit,Datecode,Jar)
SR13Denit[setkey(select(SR13JarWeights, -Location), Datecode, Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SD14
setkey(SD14Denit,Datecode,Jar)
SD14Denit[setkey(select(SD14JarWeights, -Location), Datecode, Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14
setkey(SR14Denit,Datecode,Jar)
SR14Denit[setkey(select(SR14JarWeights, - Location), Datecode, Jar),":=" (SoilDryWt=i.DryWt,SoilVolume=i.SoilVolume,WaterVolume=i.WaterVolume,Temperature=i.Temperature)]
# SR14.3 Jar 5 was incubated with an iButton, so I need to subtract this volume from the headspace.
# To do this, I am adding it to the SoilVolume here, before CalcNProdn (SoilDryWt has already been
#  calculated anyhow, and SoilVolume is only used to calculate Headspace).
SR14Denit[Datecode=="SR14.3" & Jar=="5",":=" (SoilVolume=SoilVolume+0.00062)]
# Calculate N or C produced at each timepoint
SD13Denit <- CalcNProdn(SD13Denit)
SR13Denit <- CalcNProdn(SR13Denit)
SD14Denit <- CalcNProdn(SD14Denit)
SR14Denit <- CalcNProdn(SR14Denit)
SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
SD13Denit <- SD13Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit)
abline(a = 0, b = 1)
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit, xlim = c(0, 16), ylim = c(0, 16))
abline(a = 0, b = 1)
names(SD13Denit)
SD13Denit$Temperature
unique(sort(SD13Denit$Temperature))
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit %>% filter(Temperature >= -1.5 & Temperature < 1.5), xlim = c(0, 16), ylim = c(0, 16))
points(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit %>% filter(Temperature >= -1 & Temperature < 1), col = "red")
plot(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit, xlim = c(0, 16), ylim = c(0, 16))
abline(a = 0, b = 1)
points(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit %>% filter(Temperature >= -1 & Temperature < 1), col = "red")
summary(lm(DissolvedCO2check ~ DissolvedCO2))
summary(lm(DissolvedCO2check ~ DissolvedCO2, data = SD13Denit))
SD13Denit$DissolvedCO2/SD13Denit$DissolvedCO2check
summary(SD13Denit$DissolvedCO2/SD13Denit$DissolvedCO2check)
summary(SD13Denit$DissolvedCO2 / SD13Denit$mgCperkg) # aquaenv:
summary(SD13Denit$DissolvedCO2check / SD13Denit$mgCperkg) # Henry's law:
SD14Denit <- SD14Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
SD14Denit <- SD14Denit %>%
mutate(DissolvedCO2check = mgCperkg * (WaterVolume/Headspace) * (1.64) )
plot(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit, xlim = c(0, 16), ylim = c(0, 16))
abline(a = 0, b = 1)
summary(lm(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit))
summary(SD14Denit$DissolvedCO2 / SD14Denit$DissolvedCO2check)
summary(SD14Denit$DissolvedCO2 / SD14Denit$mgCperkg) # aquaenv: dissolved is 0.21 to 1.96 times headspace
summary(SD14Denit$DissolvedCO2check / SD14Denit$mgCperkg) # Henry's law: dissolved is 0.03 to 0.35 times headspace
points(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit %>% filter(Temperature >= -1 & Temperature < 1), col = "red")
points(DissolvedCO2check ~ DissolvedCO2, data = SD14Denit %>% filter(Temperature ==0), col = "blue")
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
trees <- read.csv(file = "../Data/trees.csv")
str(trees)
1.	factor(grades,levels=c("F",”F”,"E","D","C",”C”,"B","A",”A”,”A”),ordered=TRUE)
factor(grades,levels=c("F",”F”,"E","D","C",”C”,"B","A",”A”,”A”),ordered=TRUE)
factor(grades,levels = c("f", "F", "E", "D", "C"))
seq(from=27, length=6)
seq(from=27, length.out=6)
?seq
trees %>% filter(Site == "Fredericton") %>% select(Species, Count)
library(dplyr)
trees %>% filter(Site == "Fredericton") %>% select(Species, Count)
trees %>%  select(Species, Count) %>% filter(Site == "Fredericton")
nutrients_long <- read.csv("../Data/nutrients_long.csv")
nutrients_dbl <- read.csv("../Data/nutrients_dbl.csv")
nutrients_dbl %>% separate(col=Nutrient_Rep, sep="_", into=c("Nutrient", "Rep"))
require(tidyr)
nutrients_dbl %>% separate(col=Nutrient_Rep, sep="_", into=c("Nutrient", "Rep"))
nutrients_messy <- read.csv(file="../Data/Experiment_nutrients_messy.csv")
nutrients_tidy <- nutrients_messy %>%
gather(key = "Nutrients", value  = "Concentration", 2:10) %>%
separate(col=Nutrients, into=c("Nutrient","Rep"), sep="_") %>%
spread(key=Nutrient, value=Concentration)
nutrients_tidy
Fundybirds <- read.csv(file="~/Documents/R/CREATE_R_Workshop/Data/Fundybirds.csv")
Fundybirds %>% select(CommonName,Hour)%>%
group_by(CommonName)%>%
summarize(Speciescount=sum(Hour))
Fundybirds
Fundybirds
Fundybirds %>% head()
Fundybirds$Hour %>% table
Fundybirds %>% group_by(Hour) %>% summarize(Count = n())
Fundybirds %>% group_by(Hour) %>% summarize(Count = n())
Fundybirds %>% group_by(Hour) %>% summarize(Count = n()) %>% barplot()
Fundybirds %>% group_by(Hour) %>% summarize(Count = n()) %>% table()
Fundybirds$Hour %>% table
str(trees)
filter(trees)
filter(trees, Plot == 4, Count < 11)
grades<-factor(c("A", "B", "D", "F", "C", "A", "B", "B", "C", "B"))
grades
as.numeric(grades)
exprmt <- factor(c("treat1", "treat2", "treat1", "treat3", "treat1", "control", "treat1", "treat2", "treat3"))
exprmt <- factor(exprmt, levels=c("treat1", "treat2", "treat3", "control"))
plot(exprmt)
stream_order<-c(3,3,4,5,2)
ag_catchment<-c(TRUE,FALSE,FALSE,FALSE,TRUE)
water_quality<-c("poor","fair","good","good","poor")
temperature<-c(23,22,18,20,19)
new_dataframe<-data.frame(StreamOrder=stream_order, AgCatchment=ag_catchment, WaterQuality=water_quality, Temperature=temperature)
str(new_dataframe)
?seq
seq
defaults(seq)
args(seq)
?subset
trees%>%
filter(Site=="Fredericton")%>%
select(Species, Count)
new_DF<-trees%>%
mutate(count_half= Count/2)%>%
filter(count_half>=10)%>%
select(Site, Species, count_half)
new_DF
S<-trees%>%
filter(Count != 0)%>%
group_by(Site, Plot)%>%
tally()%>%
S %>% print(n =50)
S<-trees%>%
filter(Count != 0)%>%
group_by(Site, Plot)%>%
tally()%>%
S %>% print(n =50)
S<-trees%>%
filter(Count != 0)%>%
group_by(Site, Plot)%>%
tally()
S<-trees%>%
filter(Count != 0)%>%
group_by(Site, Plot)%>%
tally()%>%
S %>% print(n =50)
S
S %>% print(n = 50)
S<-trees%>%
filter(Count != 0)%>%
group_by(Site, Plot)%>%
tally()%>%
S %>% print(n =50)
S %>% print(n =50)
carbon %>% anti_join(y=nutrients, by=c("Treatment", "Replicate"))
BirdTally<-Fundybirds %>%
select(CommonName, Hour)%>%
group_by(CommonName)%>%
tally()
BirdTally
BirdTally %>%
filter(n > 10)
Fundybirds %>%
select(CommonName, Hour)%>%
group_by(Hour, CommonName)%>%
tally()
FBRich%>%
group_by(Hour)%>%
summarize(richness=sum(count))
FBRich<-Fundybirds %>%
select(CommonName, Hour)%>%
group_by(Hour, CommonName)%>%
tally()
FBRich["count"]<-rep(1, length(247))
FBRich
FBRich%>%
group_by(Hour)%>%
summarize(richness=sum(count))
FBRich%>%
group_by(Hour)%>%
summarize(richness=count())
FBRich
FBRich%>%
group_by(Hour)%>%
summarize(richness=count(n))
FBRich%>%
group_by(Hour)%>%
summarize(richness=length(n))
FBRich%>%
group_by(Hour)%>%
summarize(richness=n(n))
FBRich%>%
group_by(Hour)%>%
summarize(richness=n())
Fundybirds$Hour
Fundybirds$Hour %>% barplot()
Fundybirds$Hour %>% table()
Fundybirds$Hour %>% table() %>% barplot()
name<-"Chris"
if (name=="Nolan") {print("same name")} else {print("different name")}
any(nutrients$Nitrate < 2)
x<-seq(1, 20, by=2)
for (n in c(1:10)) {
print(x[n]+1)
}
for(n in 1:nrow(trees)) {
if(trees$Species[n]=="Acer rubrum"){print(trees$Count[n])}}
nitrite_plus<-vector("numeric")  # had to create a blank vector first in order to modify my loop to add the nitrite plus 1 values to a vector
for(n in 1:nrow(nutrients)) {
nitrite_plus[n]<-nutrients$Nitrite[n]+1
print(nitrite_plus[n])
}
nitrite_plus
nutrients(read.csv("../Data/Experiment_nutrients.csv"))
nutrients <- (read.csv("../Data/Experiment_nutrients.csv"))
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
nutrients <- read.csv("../Data/Experiment_nutrients.csv")
nitrite_plus<-vector("numeric")  # had to create a blank vector first in order to modify my loop to add the nitrite plus 1 values to a vector
for(n in 1:nrow(nutrients)) {
nitrite_plus[n]<-nutrients$Nitrite[n]+1
print(nitrite_plus[n])
}
nitrite_plus
DIN<-vector("numeric")
for (n in 1:nrow(nutrients)) {
DIN[n]<-if((nutrients$Ammonium[n]+nutrients$Nitrate[n]+nutrients$Nitrite[n])>12){print("TRUE")}else{print("FALSE")}
}
DIN
DIN<-as.data.frame(DIN)
DIN
DIN_Summary<-merge(DIN, nutrients, by="row.names", all=TRUE)
DIN_Summary
b<-3
absolute<-function(b) {
if(b<0) {b+2*b} else{b-2*b}
}
absolute(b)
b<-3
absolute<-function(b) {
if(b<0) {b+2*b} else{b-2*b}
}
absolute(-b)
b<-3
absolute<-function(b) {
if(b<0) {b+2*b} else{b-2*b}
}
absolute(3)
algb<-function(a,b,c) {
x <- (-b - sqrt(b^2 - 4*a*c) )/(2*a)
y <- (-b + sqrt(b^2 - 4*a*c) )/(2*a)
print(paste("subtract",x))
print(paste("add",y))
}
algb(1,5,6)
fun<-function(x,y)
{z<-x/y
return(paste("The answer to the function is",z))
}
fun(12,3)
x<-c(3,4,5,NA,7,8)
Missing<-function(x) {
md<-is.na(x)
test<-any(md=="TRUE")
print(ifelse(test=="TRUE", "Warning", "No missing data"))
print(summary(x, na.rm=TRUE))
}
Missing(x)
inverts<-read.csv(file="../Data/Inverts.csv")
inverts
dataS<-function(inverts){
print(str(inverts))
inverts[!complete.cases(inverts),]
}
dataS(inverts)
Inverts <- read.csv(file="../Data/Inverts.csv", stringsAsFactors=FALSE, header=TRUE)
filter(inverts, Richness>40)
plotRich<-function(t) {
plot(get(t, pos = inverts), inverts$Richness, ylim = c(0, max(inverts$Richness)),
ylab = "Richness", xlab = t, main = paste("Invertebrate Species Richness by", t))
}
plotRich("Type")
plotRich("Country")
plotRich("CurrentVariability")
plotRich("TOC")
fruitData <- read.csv(file="../Data/fruitData.csv")
plot(Ammonium ~ Nitrate, data = nutrients, type="b", xlim=c(0,5), ylim=c(0, 14)
, xlab="Nitrate concentration", ylab="Ammonium concentration", col = "green", pch = 22,
bg="black", cex = 2, lty = 4, lwd = 2, las=2)
nutrients
Treat1<-filter(nutrients, Treatment==1)
Treat2<-filter(nutrients, Treatment==2)
plot(100, 100, xlim=c(0,5), ylim=c(0, 20), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1
, line=2)  # Label x-axis
axis(2, pos=0, las=1)
mtext(text=expression("Concentration ("*mu*"mol L"^"-1"*")"), side=2
, line=2)  # Label y-axis
points(Ammonium ~ Nitrate, data=Treat1, pch=19, col="red")
points(Nitrite ~ Nitrate, data=Treat1, pch=19, col="blue")
points(Ammonium ~ Nitrate, data=Treat2, pch=17, col="red")
points(Nitrite ~ Nitrate, data=Treat2, pch=17, col="blue")
legend(x=0.1, y=20, legend=c("Ammonium Treatment 1", "Nitrate Treatment 1","Ammonium Treatment 2", "Nitrate Treatment 2"),
pch=c(19,19,17,17), col=c("red","blue","red","blue"))
trees
head(trees)
op <- options(contrasts = c(unordered="contr.helmert", ordered="contr.poly"))
inverts
plot(Richness ~ MeanTemperature, data = inverts)
temp.lm<-lm(Richness ~ MeanTemperature, data = inverts)
summary(temp.lm)
genes
genes<-read.csv(file = "../Data/genes.csv")
metals<-read.csv(file = "../Data/metals.csv")
plot(nirS ~ nosZ, data = genes)
genes.lm<-lm(nirS ~ nosZ, data = genes)
summary(genes.lm)
attributes(summary(climate.lm))
climate<-read.csv(file = "Course_Data/climates.csv")
climate<-read.csv(file = "Course../Data/climates.csv")
climate<-read.csv(file = "../Data/climates.csv")
climate.lm<-lm(MAT ~ MAP, data = climate)
attributes(summary(climate.lm))
print(paste("slope",summary(climate.lm)$coefficients["MAP","Estimate"]))
print(paste("intercept",summary(climate.lm)$coefficients["(Intercept)","Estimate"]))
print(paste("p-value",summary(climate.lm)$coefficients["MAP","Pr(>|t|)"]))
print(paste("adjusted r squared",summary(climate.lm)$adj.r.squared))
results<-function(x) {
w<-c((summary(x)$coefficients[2,1]),(summary(x)$coefficients[1,1]))
return(w)
}
results(climate.lm)
trees.species.mod<-aov(Count ~ Species, data = trees)
summary(trees.species.mod)
absorbances<-read.csv(file="../Data/Nitrification_Absorbances.csv")
head(absorbances)
library(dplyr)
calibrate.all<-function(x) {
calibration<-x%>%
filter(Type=="Standard")
plot(StandardConc ~ Absorbance, data = x)
calibrate.lm<-lm(StandardConc ~ Absorbance, data=x)
summary(calibrate.lm)
r2<-summary(calibrate.lm)$adj.r.squared
slope<-summary(calibrate.lm)$coefficients[2,1]
intercept<-summary(calibrate.lm)$coefficients[1,1]
print(paste("adjusted r squared",r2))
print(paste("slope", slope))
print(paste("intercept", intercept))
samples<-absorbances%>%
filter(Type=="Sample")%>%
mutate(Conc = (slope*Absorbance)+intercept)%>%
select(Type, SampleID, Absorbance, Conc)
write.csv(samples, file = "Clean_Data/Nitrification_Absorbances_Calibrate.csv")
}
calibrate.all(absorbances)
