N2Odiss <- xprime * Eff * watervol
N2Odiss
N2Odiss * 28.0134 * 1000 / (data$SoilDryWt/1000)
N2Odiss * 28.0134 * 1000 / (SoilDryWt/1000)
SoilDryWt <- 155.08
N2Odiss * 28.0134 * 1000 / (SoilDryWt/1000)
N2Oconc <- 0.596077736
Tk <- temperature + 273.15      # degrees in Kelvin
delta <- 65.0 - (0.1338*Tk)     # cross virial coefficient, cm3 mol-1
B <- -905.95 + (4.1685*Tk) - (0.0052734*Tk*Tk)    # second virial coefficient, cm3 mol-1
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
pH2O <- exp( 24.4543 - 67.4509 * (100/Tk) - (4.8489*log(Tk/100)) )   # vapor pressure of water (atm)
p <- 1                          # total barometric pressure (1 atm)
R <- 0.08214                    # L atm mol-1 K-1
# Find the molar volume of N2O in dry air (mol N2O L-1 air) from headspace N2O concentration
# molar volume = x' = (N2O conc in L/L) (see above)
xprime <- N2Oconc * (1/1e6)
# Function involved in the final equation
Eff <- K0 * (p-pH2O) * exp (p * ( (B+2*delta) / (R*Tk)  ) )
# Finally, find dissolved N2O! (mol N2O)
N2Odiss <- xprime * Eff * watervol
## Then, multiply by 28.0134 g N/mol N2O * 1000 mg/1 g to get mg N
## And divide by dry soil weight in kg (data$SoilDryWt/1000) to get mg N/kg soil
N2Odiss * 28.0134 * 1000 / (SoilDryWt/1000)
watervol <- 0.0618632049743646
Tk <- temperature + 273.15      # degrees in Kelvin
delta <- 65.0 - (0.1338*Tk)     # cross virial coefficient, cm3 mol-1
B <- -905.95 + (4.1685*Tk) - (0.0052734*Tk*Tk)    # second virial coefficient, cm3 mol-1
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
pH2O <- exp( 24.4543 - 67.4509 * (100/Tk) - (4.8489*log(Tk/100)) )   # vapor pressure of water (atm)
p <- 1                          # total barometric pressure (1 atm)
R <- 0.08214                    # L atm mol-1 K-1
# Find the molar volume of N2O in dry air (mol N2O L-1 air) from headspace N2O concentration
# molar volume = x' = (N2O conc in L/L) (see above)
xprime <- N2Oconc * (1/1e6)
# Function involved in the final equation
Eff <- K0 * (p-pH2O) * exp (p * ( (B+2*delta) / (R*Tk)  ) )
# Finally, find dissolved N2O! (mol N2O)
N2Odiss <- xprime * Eff * watervol
## Then, multiply by 28.0134 g N/mol N2O * 1000 mg/1 g to get mg N
## And divide by dry soil weight in kg (data$SoilDryWt/1000) to get mg N/kg soil
N2Odiss * 28.0134 * 1000 / (SoilDryWt/1000)
p <- 1                          # total barometric pressure (1 atm)
DissolvedN2O(watervol,N2Oconc,temperature)
DissolvedN2O <- function(watervol,N2Oconc,temperature) {
# Set up constants and variables dependent on temperature (to find value of function Eff, and x')
p <- 1                          # total barometric pressure (1 atm)
R <- 0.08214                    # L atm mol-1 K-1
Tk <- temperature + 273.15      # degrees in Kelvin
delta <- 65.0 - (0.1338*Tk)     # cross virial coefficient, cm3 mol-1
B <- -905.95 + (4.1685*Tk) - (0.0052734*Tk*Tk)    # second virial coefficient, cm3 mol-1
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
pH2O <- exp( 24.4543 - 67.4509 * (100/Tk) - (4.8489*log(Tk/100)) )   # vapor pressure of water (atm)
# Find the molar volume of N2O in dry air (mol N2O L-1 air) from headspace N2O concentration
# molar volume = x' = (N2O conc in L/L) (see above)
xprime <- N2Oconc * (1/1e6)
# Function involved in the final equation
Eff <- K0 * (p-pH2O) * exp (p * ( (B+2*delta) / (R*Tk)  ) )
# Finally, find dissolved N2O! (mol N2O)
N2Odiss <- xprime * Eff * watervol
return(N2Odiss)
}
DissolvedN2O(watervol,N2Oconc,temperature)
N2Odiss
N2Odiss
pH2O
Tk <- temperature + 273.15 - 0.15     # degrees in Kelvin
Tk <- temperature + 273.15 - 0.15     # degrees in Kelvin
delta <- 65.0 - (0.1338*Tk)     # cross virial coefficient, cm3 mol-1
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
pH2O <- exp( 24.4543 - 67.4509 * (100/Tk) - (4.8489*log(Tk/100)) )   # vapor pressure of water (atm)
pH2O
p <- 1.060/0.062 # This is total volume/headspace volume, which makes no sense to me.
eqportion <- (-9.4563/Tk)+0.04739-(0.00006427*Tk)
F <- K0 * (p-pH2O) * exp(p * eqportion)
F
eqportion
K0
K0 <- (0.0000299*Tk*Tk) - (0.00214*Tk) + 0.0591   # equilibrium constant - uses the wrong equation (from original Roper paper, not errata, appropriate for temp in C)
F <- K0 * (p-pH2O) * exp(p * eqportion)
F
f <- NULL
rm(f)
rm(F)
f
F
FDB <- K0 * (p-pH2O) * exp(p * eqportion)
FD
FDB
K0
Tk <- temperature + 273.15      # degrees in Kelvin
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
K0DB <- (0.0000299*temperature*temperature) - (0.00214*temperature) + 0.0591   # equilibrium constant - uses the wrong equation (from original Roper paper, not errata, appropriate for temp in C)
K0
K0DB
Tk <- temperature + 273      # degrees in Kelvin
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
K0
Tk
Tk <- temperature + 273.15      # degrees in Kelvin
K0 <- (0.0000299*Tk*Tk) - (0.0184*Tk) + 2.868   # equilibrium constant
FDB
p <- 1.13
FDB <- K0DB * (p-pH2O) * exp(p * eqportion)
FDB
N2Odiss
myval <- (B+2*delta) / (R*Tk)
myval
Eff
DissolvedN2O(watervol,N2Oconc,temperature)
B2 <- -905.95 + 4.1685*(Tk-0.0052734) * Tk * Tk # Err, did I read that wrong...?
Eff2 <- K0 * (p-pH2O) * exp (p * ( (B2+2*delta) / (R*Tk)  ) )
Eff2
B2
K0 * (p-pH2O) * exp (p * ( (B2+2*delta) / (R*Tk)  ) )
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
test <- c(1:40)
str(test)
test <- test[rep(c(1,2),20)]
test
test <- c(1:40)
test <- test[seq(from=1, to = 40, by = 2)]
tet
test
str(test)
test <- rep("character",3)
test
test <- rep("character",30)
str(test)
test <- rep("character vector numero",30)
str(test)
plot(0,0,type="n", xlim=c(0,10), ylim=c(0,10), axes=FALSE)
plot(0,0,type="n", xlim=c(0,10), ylim=c(0,10), axes=FALSE, xlab="", ylab="")
?text
?arrows
plot(0,0,type="n", xlim=c(0,10), ylim=c(0,10), axes=FALSE, xlab="", ylab="")
text(x=rep(5,3), y=c(2,5,8), labels=c("logical", "numeric", "character"))
arrows(x0=5, x1=5, y=2.5, y1=4.5, length=0.1, angle=30, code=2)
plot(0,0,type="n", xlim=c(0,10), ylim=c(0,10), axes=FALSE, xlab="", ylab="")
text(x=rep(5,3), y=c(2,5,8), labels=c("logical", "numeric", "character"))
arrows(x0=5, x1=5, y=2.75, y1=4.25, length=0.1, angle=30, code=2)
arrows(x0=5, x1=5, y=5.75, y1=7.25, length=0.1, angle=30, code=2)
sample <- c(2, 4, 4, "NA", 6)
mean(sample, na.rm = TRUE)
trees <- read.csv(file="../Data/trees.csv")
trees
str(trees)
str(trees)
flavors <- factor(c("sweet", "savory", "savory", "sweet"))
levels(flavors)
nlevels(flavors)
food <- factor(c("low", "high", "medium", "high", "low", "medium", "high"))
levels(food)
food <- factor(food, levels=c("low", "medium", "high"))
levels(food)
food <- factor(food, levels=c("low", "medium", "high"), ordered=TRUE)
levels(food)
min(food)
as.character(food)
as.numeric(food)
concentrations <- factor(c(1, 5, 10, 2))
as.numeric(concentrations)
concentrations <- factor(c(1, 5, 10, 2))
concentrations
as.numeric(concentrations)
concentrations <- factor(c(1, 5, 10, 2))
concentrations
as.numeric(concentrations)
str(concentratinos)
str(concentrations)
concentrations <- factor(c(1, 5, 10, 2))
as.numeric(concentrations)
str(trees)
grades <- factor(c("A", "C", "B", "A", "F", "C", "A", "D", "B", "F"), levels=c("A", "B", "C", "D", "F"), ordered=TRUE)
grades
str(grades)
food <- factor(c("low", "high", "medium", "high", "low", "medium", "high"))
levels(food)
food <- factor(food, levels=c("low", "medium", "high"))
levels(food)
min(food)
exprmt <- factor(c("treat1", "treat2", "treat1", "treat3", "treat1", "control", "treat1", "treat2", "treat3"))
exprmt
str(exprmt)
str(exprmt, ordered=TRUE)
str(exprmt, levels=c("treat1", "treat2", "treat3", "control")) %>% plot()
require(dplyr)
str(exprmt, levels=c("treat1", "treat2", "treat3", "control")) %>% plot()
factor(exprmt, levels=c("treat1", "treat2", "treat3", "control")) %>% plot()
trees
as.numeric(concentrations) %>% is.integer
is.integer(concentrations)
## Set paths ##
##-----------##
# Directory for this R file and possibly related files
SD13RPath <- "/Users/lindsay/Documents/PRC/Analysis/Rfiles/SD13/"
# Directory for GC input data files (data and inventory metadata)
SD13DenitInputPath <- "/Users/lindsay/Documents/PRC/Data/SD13/Gases/InputFiles/"
# Directory for collar volumes (apparently not used here)
SD13CollarHeightInputPath <- "/Users/lindsay/Documents/PRC/Data/SD13/Field Data/Collar Heights/"
# Directory for field data (air temp, chamber volumes)
SD13FieldDataInputPath <- "/Users/lindsay/Documents/PRC/Data/SD13/Field Data/"
# Output
SD13GasFluxOutputPath <- "/Users/lindsay/Documents/PRC/Analysis/Output/SD13/GasFlux/"
ChamberVolumes <- data.table(read.csv(paste(SD13FieldDataInputPath,"SD13 Chamber Volumes.csv",sep=""),sep=",",header=T))
library(data.table)
ChamberVolumes <- data.table(read.csv(paste(SD13FieldDataInputPath,"SD13 Chamber Volumes.csv",sep=""),sep=",",header=T))
ChamberVolumes14 <- data.table(read.csv(paste(SD13FieldDataInputPath,"SD14 Chamber Volumes.csv",sep=""),sep=",",header=T))
ChamberVolumesSR14 <- data.table(read.csv(paste(SD13FieldDataInputPath,"SR14 Chamber Volumes.csv",sep=""),sep=",",header=T))
ChamberVolumes
str(ChamberVolumes)
ChamberVolumes$ChamberVolume
ChamberVolumesHeadspace <- data.table(read.csv(paste(SD13FieldDataInputPath,"ChamberVolumesHeadspace13.csv",sep=""),sep=",",header=T))
ChamberVolumesHeadspace14 <- data.table(read.csv(paste(SD13FieldDataInputPath,"ChamberVolumesHeadspace14.csv",sep=""),sep=",",header=T))
library(dplyr)
ChamberVolumes[,c("Location","Datecode","ChamberVolume"), with=FALSE]
ChamberVolumesHeadspace %>% str()
ChamberVolumes[,c("Location","Datecode","ChamberVolume"), with=FALSE] %>% left_join(ChamberHeadspace,by=c("Location","Datecode"))
ChamberVolumes[,c("Location","Datecode","ChamberVolume"), with=FALSE] %>% left_join(ChamberVolumesHeadspace,by=c("Location","Datecode"))
test <- ChamberVolumes[,c("Location","Datecode","ChamberVolume"), with=FALSE] %>% left_join(ChamberVolumesHeadspace,by=c("Location","Datecode"))
str(test)
test$ChamberHeadspace - test$ChamberVolume
str(test)
plot(ChamberVolume, data=test)
plot(test$ChamberVolume)
plot(test$ChamberVolume, type="l", color="red")
plot(test$ChamberVolume, type="l", col="red")
warnings()
plot(test$ChamberVolume, type="l", col="red")
plot(test$ChamberVolume, type="l", las=1, col="red")
points(test$ChamberHeadspace, type="l", col="blue")
points(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green")
par(mfrow=c(2,1))
plot(test$ChamberVolume, type="l", las=1, col="red")
points(test$ChamberHeadspace, type="l", col="blue")
plot(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green")
plot(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green", las=1)
plot(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green", las=1)
plot(test$ChamberVolume, type="l", las=1, col="red")
points(test$ChamberHeadspace, type="l", col="blue")
plot(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green", las=1)
plot(test$ChamberVolume, type="l", las=1, col="red", ylim=c(0,3000))
points(test$ChamberHeadspace, type="l", col="blue")
plot(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green", las=1, ylim=c(0,3000))
plot(test$ChamberVolume, type="l", las=1, col="red", ylim=c(0,30000))
points(test$ChamberHeadspace, type="l", col="blue")
plot(test$ChamberVolume - test$ChamberHeadspace, type="l", col="green", las=1, ylim=c(0,30000))
trees <- read.csv(file = "../Data/trees.csv", stringsAsFactors = FALSE)
str(trees)
example_data <- data.frame(animal = c("dog", "cat", "sea cucumber", "sea urchin"),
feel = c("furry", "furry", "squishy", "spiny"),
weight = c(45, 8, 1.1, 0.8))
str(example_data)
example_data <- data.frame(animal = c("dog", "cat", "sea cucumber", "sea urchin"),
feel = c("furry", "furry", "squishy", "spiny"),
weight = c(45, 8, 1.1, 0.8))
str(example_data)
example_data <- data.frame(animal = c("dog", "cat", "sea cucumber", "sea urchin"),
feel = c("furry", "furry", "squishy", "spiny"),
weight = c(45, 8, 1.1, 0.8),
stringsAsFactors = FALSE)
str(example_data)
author_book <- data.frame(author_first = c("Charles", "Ernst", "Theodosius"),
author_last = c(Darwin, Mayr, Dobzhansky),
year = c(1942, 1937)
)
author_book <- data.frame(author_first = c("Charles", "Ernst", "Theodosius"),
author_last = c("Darwin", "Mayr", "Dobzhansky"),
year = c(1859, 1942, 1937)
)
author_book <- data.frame(author_first = c("Charles", "Ernst", "Theodosius"),
author_last = c("Darwin", "Mayr", "Dobzhansky"),
year = c(1859, 1942, 1937)
)
author_book
color <- c("red", "green", "blue", "yellow")
counts <- c(50, 60, 65, 82)
new_dataframe <- data.frame(colors = color, counts = counts)
new_dataframe
color <- c("red", "green", "blue", "yellow")
counts <- c(50, 60, 65, 82)
new_dataframe <- data.frame(colors = color, counts = counts)
str(new_dataframe)
class(new_dataframe)
country_climate <- data.frame(country = c("Canada", "Panama", "South Africa", "Australia"),
climate = c("cold", "hot", "temperate", "hot/temperate"),
temperature = c(10, 30, 18, "15"),
northern_hemisphere = c(TRUE, TRUE, FALSE, "FALSE"),
has_kangaroo = c(FALSE, FALSE, FALSE, 1) )
str(country_climate)
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
setwd("~/Desktop/Rfiles 2016-01-29")
setwd("~/Documents/R/CREATE_R_Workshop/SampleFileStructure/Desktop/IntroR_OnlineCourse")
setwd("~/Documents/R/CREATE_R_Workshop/Lessons_Rmd")
?read.csv
my_data_file <- read.csv(file = "data/my_data_file.csv")
SD13GasFlux <- data.table(read.csv(paste(SD13DenitInputPath,"SD13 Gas Flux.csv",sep=""),sep=",",header=T))
SD13GasFlux %>% dim()
SD14GasFlux <- data.table(read.csv(paste(SD13DenitInputPath,"SD14 Gas Flux.csv",sep=""),sep=",",header=T))
SR14GasFlux <- data.table(read.csv(paste(SD13DenitInputPath,"SR14 Gas Flux.csv",sep=""),sep=",",header=T))
SD14GasFlux %>% dim()
SR14GasFlux %>% dim()
# Directory for this R file and possibly related files
WMRPath <- "/Users/lindsay/Documents/PRC/Analysis/Rfiles/Winter Microcosm/"
# SD13 R path for certain functions (dissolved N2O) in R scripts
SD13RPath <- "/Users/lindsay/Documents/PRC/Analysis/Rfiles/SD13/"
# Directory for GC input data files
WMGasDataInputPath <- "/Users/lindsay/Documents/PRC/Data/Winter Microcosm/Gas Data/Input/"
# Directory for inventory input file
WMInventoryInputPath <- "/Users/lindsay/Documents/PRC/Data/Winter Microcosm/Inventories and data sheets/"
# Output for gas flux
WMGasFluxOutputPath <- "/Users/lindsay/Documents/PRC/Analysis/Output/Winter Microcosm/Gas Flux/"
# WM Output general path
WMOutputPath <- "/Users/lindsay/Documents/PRC/Analysis/Output/Winter Microcosm/"
WMGasFlux <- data.table(read.csv(paste(WMGasDataInputPath,"WM Gas Flux Input.csv",sep=""),sep=",",header=T))
WMGasFlux %>% dim()
mussel <- c(2.31, 3.21, 2.6, 2.92, 2.47, 3.97)
lsm <- c(7.27, 7.33, 5.82, 11.33, 5.6, 4.4)
mussel/lsm
min(mussel/lsm)
max(mussel/lsm)
gilman <- c(2.61, 3.44, 2.94, 3.39, 2.94, 4.43)
min(mussel/gilman)
max(mussel/gilman)
min((mussel-gilman)/gilman)
max((mussel-gilman)/gilman)
mussel-gilman
gilman-mussel
(gilman-mussel)/gilman
min((gilman-mussel)/gilman)
max((gilman-mussel)/gilman)
trees
trees["Species"]
trees[c("Species","Count")]
str(trees)
select <- dplyr::select
select(trees, Site, Species, Count)  # Your output will have more lines
select(trees, Site) %>% unique
filter(trees, Count > 30)
filter(trees, Count > 40)
trees_40 <- filter(trees, Count > 40)
trees_40
trees_30 <- filter(trees, Count > 30)
trees_30_speciesCount <- select(trees_30, Species, Count)
trees_30_speciesCount
trees_30 <- filter(trees, Count > 35)
trees_30_speciesCount <- select(trees_30, Species, Count)
trees_30_speciesCount
trees_40 <- filter(trees, Count > 40)
trees_40_speciesCount <- select(trees_40, Species, Count)
trees_40_speciesCount
select(filter(trees, Count > 40), Species, Count)
?select
filter(trees, Count <10)
filter(trees, Count <10) %>% dim()
filter(trees, Count <10) %>% str()
trees_sm <- trees %>%
filter(Count > 30 & Plot == 4)
trees %>%
filter(Count > 30 & Plot == 4)
trees %>%
filter(Count > 10 & Plot == 4)
trees %>%
filter(Count > 10 & Plot == 4) %>% str()
trees %>%
filter(Plot == 1)
filter(Plot == 2 & Site =="Saint John")
trees %>% filter(Plot == 2 & Site == "Saint John")
trees %>% filter(Plot == 2 & Site == "Saint John" & Count < 10)
filter(trees, Count < 20 & Site == "New Brunswick")
filter(trees, Count < 30 & Site == "New Brunswick")
filter(trees, Count < 30 & Province == "New Brunswick")
filter(trees, Count < 20 & Province == "New Brunswick")
trees %>% filter(Plot == 2 & Site == "Saint John" & Count < 10)
trees %>%
filter(Site == "Fredericton") %>%
select(Species, Count)
trees %>%
select(Species, Count) %>%
filter(Site == "Fredericton")
str(trees)
trees %>% group_by(Site, Plot) %>% summarize(trees=sum(Count))
trees %>% group_by(Site, Plot) %>% summarize(trees=sum(Count)) %>% select(trees)
trees %>% group_by(Site, Plot) %>% summarize(Count=sum(Count)) %>% select(Count)
trees %>% group_by(Site, Plot) %>% summarize(Count=sum(Count))
trees %>% group_by(Site, Plot) %>% summarize(Count=sum(Count)) %>% select(Count) %>% unlist()
trees %>% group_by(Site, Plot) %>% summarize(Count=sum(Count)) %>% summarize(average=mean(Count))
trees %>% group_by(Site, Plot) %>% summarize(Count=sum(Count))
trees %>% group_by(Site, Plot) %>% summarize(Count=sum(Count)) %>% tally()
trees %>% group_by(Site, Plot) %>% summarize(total=sum(Count)) %>% summarize(mean(total))
trees %>%
mutate(Count_ha = Count * 10)
trees %>%
mutate(Count_ha = Count * 10) %>%
print(n = 10)
trees %>%
mutate(Count_ha = Count * 10) %>%
print(n = 10)
filter(trees, Count < 20 & Province == "New Brunswick")
trees %>% filter(Plot == 2 & Site == "Saint John" & Count < 10)
?print.data.frame
trees %>%
mutate(Count_half = Count/2) %>%
filter(Count_half > 10) %>%
select(Site, Species, Count_half)
trees %>%
mutate(Count_half = Count/2) %>%
filter(Count_half > 0) %>%
select(Site, Species, Count_half)
trees %>%
group_by(Species) %>%
summarize(meanCount = mean(Count))
trees %>%
group_by(Site, Species) %>%
summarize(plots = length(Count))
trees %>%
group_by(Site, Species) %>%
summarize(plots = count(Plot))
trees %>%
group_by(Site, Species) %>%
summarize(plots = length(Plot))
trees %>%
group_by(Site, Species) %>%
summarize(meanCount = mean(Count), minCount = min(Count), plotCount = length(Plot))
trees %>%
group_by(Province) %>%
tally()
trees %>%
group_by(Site, Plot) %>%
tally()
trees %>%
group_by(Site, Plot) %>%
tally() %>%
summarize(min = min(n))
trees %>%
group_by(Site, Plot) %>%
tally() %>% str()
trees %>%
group_by(Site, Plot) %>%
tally() %>%
filter(n != 6)
trees
trees %>% filter(Species=="Acer rubrum")
trees %>% group_by(Site) %>% summarise(maxCount = max(Count))
trees %>%
group_by(Site) %>%
summarise(maxCount = max(Count))
trees %>%
filter(Species == "Acer rubrum") %>%
group_by(Site) %>%
summarise(maxCount = max(Count))
trees %>%
group_by(Site, Species) %>%
summarize(meanCount = mean(Count), minCount = min(Count), plotCount = length(Plot))
trees %>% filter(Province == "New Brunswick")
trees %>% group_by(Site, Plot)
trees %>% group_by(Site, Plot) %>% summarize(totalTrees = sum(Count))
trees %>% filter(Province == "New Brunswick")
trees %>% filter(Province == "New Brunswick" & Count >   40)
trees %>% filter(Province == "New Brunswick" & Count >  30)
trees %>% filter(Province == "New Brunswick" & Count >  30) %>% select(Species)
trees %>% filter(Province == "New Brunswick" & Count >  30) %>% select(Species) %>% unique()
trees %>% filter(Province == "New Brunswick" & Count >  35) %>% select(Species) %>% unique()
trees %>% filter(Province == "New Brunswick" & Count > 35) %>% select(Species)
trees %>% filter(Province == "New Brunswick" & Count > 34) %>% select(Species)
trees %>% filter(Province == "New Brunswick" & Count > 35) %>% select(Species)
trees %>% filter(Province == "New Brunswick")
treeCount_NB <- trees %>%
filter(Province == "New Brunswick") %>%
group_by(Site, Plot) %>%
summarize(treeCount = sum(Count))
treeCount_NB
?write.csv
trees %>%
group_by(Site) %>%
summarise(meanCount = mean(Count))
trees %>%
filter(Species == "Acer rubrum") %>%
group_by(Site) %>%
summarise(meanCount = mean(Count))
trees %>% filter(Count != 0) %>%
group_by(Site, Plot) %>%
tally()
trees %>% filter(Count != 0) %>%
group_by(Site, Plot) %>%
tally() %>% filter(n != 6)
trees %>% filter(Count == 0)
trees %>% filter(Count == 0)
trees <- read.csv("~/Documents/R/CREATE_R_Workshop/Data/trees.csv")
trees %>% filter(Count == 0)
trees %>%
filter(Count != 0) %>%
group_by(Site, Plot) %>%
tally()
trees %>%
filter(Count != 0) %>%
group_by(Site, Plot) %>%
tally() %>%
filter(n != 6)
trees %>%
group_by(Site, Species) %>%
summarize(meanCount = mean(Count)) %>% str()
trees %>%
group_by(Province) %>%
tally()
trees %>%
group_by(Province) %>%
summarize(test = length(Count))
trees %>%
group_by(Province) %>%
tally() %>% str()
trees %>% group_by(Site) %>% tally()
