statistics(c(4,2,4, NA))
statistics(c(3,5,2))
statistics(c(3,5,2,NA))
library(tidyr)
sessionInfo()
library(tidyr)
install.packages("tidyr")
install.packages("dplyr")
library(caret)
install.packages("caret")
install.packages("kernlab")
install.packages("ISLR")
install.packages("ggplot2")
install.packages("MASS")
install.packages("plyr")
install.packages("Hmisc")
install.packages("gridExtra")
setwd("~/Documents/R/CREATE_R_Workshop")
Inverts <- read.csv(file="Data/Inverts.csv")
Inverts
checkData <- function(dataset){
# Print output based on whether any variables are not numeric
if (any(!is.numeric(dataset$Richness), !is.numeric(dataset$TOC), !is.numeric(dataset$CurrentVariability), !is.numeric(dataset$MeanTemperature)) == TRUE) {print("At least one variable is not numeric")} else {
print("All variables are numeric")
}
# Which observations have NA values for one of the measured variables?
print("The following observations (if any) have NA values for at least one of the measured variables:")
dataset %>%
filter(is.na(Richness) | is.na(TOC) | is.na(CurrentVariability) | is.na(MeanTemperature) | is.na(Type) | is.na(Country))
}
checkData(Inverts)
library(dplyr)
library(tidyr)
checkData(Inverts)
richnessThreshold <- function(dataset){
# Count how many sites have species richness greater than 40
richSites <- dataset %>%
filter(Richness > 40) %>%
tally()
return(paste("There are ",richSites," sites that have richness greater than 40.", sep="") )
}
richnessThreshold(Inverts)
plotVsRichness <- function(dataset, yvariable){
# Find y-axis limits to be able to start at 0 (not necessary, but helps with plot aesthetics)
ymax <- dataset %>%
select(get(yvariable)) %>%
unlist() %>%  # Take out of list form
max(na.rm=T) %>%   # Find maximum value
# Round up to the nearest two:
`/`(2) %>%  # Divide by two, using the division inline function as a normal function via `
ceiling %>%  # Ceiling rounds up to the nearest whole number
`*`(2)  # Multiply by two, using the * inline function as a normal function via `
# Make plot
plot(get(yvariable) ~ Richness, data=dataset, ann=FALSE, axes=FALSE, pch=19, ylim=c(0,ymax), xlim=c(0,100))
# Add axes and labels
axis(1, pos=0) # Only if the plot is set to start at 0
mtext(side=1,line=2,"Richness")
axis(2, pos=0, las=1)
mtext(side=2, line=2, yvariable)
}
plotVsRichness(Inverts, "MeanTemperature")  # Plot mean temperature against richness
plotVsRichness(Inverts, "TOC")  # Plot total organic carbon against richness
outcome <- ifelse(test = a %% 2 == 0, yes = "even", no = "odd")
trees <- read.csv(file="Data/trees.csv")
trees
genes <- read.csv(file="Data/genes.csv")
genes
plot(nirS ~ nirK, data=genes)
plot(nirS ~ nosZ, data=genes)
plot(nirS ~ nosZ, data=genes, pch=21)
plot(nirS ~ nosZ, data=genes, pch=19)
lm(nirS ~ nosZ, data=genes)
summary(lm(nirS ~ nosZ, data=genes))
metals <- read.csv(file="Data/metals.csv")
metals
genes
left_join(genes, metals, by = "Site")
test <- left_join(genes, metals, by = "Site")
warnings()
test
plot(nirS~Pb, data=test)
climates <- read.csv(file="Data/climates.csv")
climates
plot(MAT~MAP, data=climates)
summary(lm(MAT~MAP, data=climates))
plot(MAT~MAP, data=climates, pch=19)
summary(lm(MAT~MAP, data=climates))
abline(lm(MAT~MAP, data=climates))
summary(lm(MAT~MAP, data=climates))
summary(lm(nirS ~ nosZ, data=genes))
summary(lm(nirK ~ nosZ, data=genes))
summary(lm(nirS ~ nosZ, data=genes))
summary(lm(nirS ~ nirK, data=genes))
genes <- read.csv(file="Data/genes.csv")
summary(lm(nirS~nosZ, data=genes))
climates <- read.csv(file="Data/climates.csv")
summary(lm(MAT~MAP, data=climates))
plot(MAP~MAT, data=climates, pch=19, las=1)
summary(lm(MAP~MAT, data=climates))
climateModel <- lm(MAP~MAT, data=climates) # Create model
attributes(summary(climateModel))
summary(climateModel)$coefficients
summary(climateModel)$coefficients['MAT','Estimate'] # Slope
summary(climateModel)$coefficients['(Intercept)','Estimate'] # Slope
summary(climateModel)$coefficients['MAT','Pr(>|t|)'] # p-value
summary(climateModel)
summary(climateModel)$coefficients['MAT','Pr(>|t|)'] # p-value
attributes(summary(climateModel)) # Reminder of model attributes
summary(climateModel)$terms
summary(climateModel)$fstatistic
summary(climateModel)$cov.unscaled
summary(climateModel)$coefficients
getSlopeIntercept <- function(lmodel){
slope <- summary(lmodel)$coefficients[2,1]
intercept <- summary(lmodel)$coefficients[1,1]
print("slope, intercept")
return(c(slope, intercept))
}
getSlopeIntercept(climateModel)
summary(climateModel)$coefficients
Inverts
head(Inverts)
InvertsChallenge.lm <- lm(Richness ~ MeanTemperature, data = Inverts)
summary(InvertsChallenge.lm)
plot(Richness ~ MeanTemperature, data = Inverts, pch=19, las=1)
# Look at data
plot(Richness ~ MeanTemperature, data = Inverts, pch=19, las=1)
# Doesn't look like much, but there may be a postive relationship, so let's check the model anyhow.
# Create linear model
InvertsChallenge.lm <- lm(Richness ~ MeanTemperature, data = Inverts)
# Look at summary of model
summary(InvertsChallenge.lm)
# The model is not significant!
climates <- read.csv(file="Data/climates.csv") # Read in data
plot(MAP~MAT, data=climates, pch=19, las=1) # Plot data
summary(lm(MAP~MAT, data=climates)) # Look at summary of linear model
# Chunk 1
## Load packages that would theoretically have been loaded during previous lessons, to allow for functioning as a standalone script
library("dplyr")
library("tidyr")
# Chunk 2
# Read in Inverts data (first introduced in functions lesson)
Inverts <- read.csv(file="../Data/Inverts.csv", stringsAsFactors=TRUE, header=TRUE)
# Chunk 3
# Function to make a simple scatterplot with consistent axes
makeSimplePlot <- function(xvals, yvals, letterval) {
plot(1, 1, ann=FALSE, axes=FALSE, type="n", xlim=c(0,20), ylim=c(0,16))
axis(1, pos=0, at=seq(0, 20, by=4))
mtext(side=1, line=2, text="x")
axis(2, pos=0, las=1, at=seq(0, 16, by=4))
mtext(side=2, line=2, text="y")
lines(x=c(2, 20), y=predict(lm(yvals~xvals), newdata=data.frame(xvals=c(2,20))))
points(yvals ~ xvals, pch=21, col="black", bg="lightblue", cex=1.2)
text(1, 15, paste("(",letterval,")",sep=""), adj=0, cex=1.2)
}
par(mfrow=c(2,2), mar=c(3,3,2,2)) # Plot 4 plots as 2 x 2
# Plot all 4 data sets from the anscombe quartet
makeSimplePlot(anscombe$x1, anscombe$y1, "a")
makeSimplePlot(anscombe$x2, anscombe$y2, "b")
makeSimplePlot(anscombe$x3, anscombe$y3, "c")
makeSimplePlot(anscombe$x4, anscombe$y4, "d")
par(mfrow=c(1,1), mar=c(5,5,2,2)) # Reset layout to a single plot with larger margins
# Chunk 4
plot(Richness ~ TOC, data=Inverts, pch=19, las=1)
# Chunk 6
Inverts.lm <- lm(Richness ~ TOC, data = Inverts)
# Chunk 7
Inverts.lm
# Chunk 8
summary(Inverts.lm)
# Chunk 9
plot(resid(Inverts.lm) ~ fitted(Inverts.lm), xlab="Fitted values", ylab="Residuals")
# Chunk 10
hist(resid(Inverts.lm), xlab = "Residuals", main = "Histogram of residuals of Inverts.lm")
# Chunk 11
qqnorm(resid(Inverts.lm))
qqline(resid(Inverts.lm))
# Chunk 12
summary(Inverts.lm)
attributes(summary(Inverts.lm))
# Chunk 13
summary(Inverts.lm)$adj.r.squared
# Chunk 14
summary(Inverts.lm)$coefficients
# Chunk 15
# Get p-value for TOC, which is in the 2nd row and 4th column
summary(Inverts.lm)$coefficients[2, 4]
# Chunk 16
# Get p-value for TOC using row and column names
summary(Inverts.lm)$coefficients["TOC", "Pr(>|t|)"]
# Chunk 17
# Pearson's correlation between TOC and Richness
# Using individual vectors, you could run this as:
#	cor.test(Inverts$TOC, Inverts$Richness)
# Another option is to specify a formula
cor.test(~ Richness + TOC, data=Inverts)
# Look at names of attributes
attributes(cor.test(~ Richness + TOC, data=Inverts))
# Extract the p.value
cor.test(~ Richness + TOC, data=Inverts)$p.value
install.packages(lsmeans)
install.packages("lsmeans")
str(Inverts)
Inverts %>% mutate(Type = as.factor(Type), Country = as.factor(Country))
Inverts %>% mutate(Type = as.factor(Type), Country = as.factor(Country)) %>% str
Inverts <- read.csv(file="../Data/Inverts.csv", stringsAsFactors=FALSE, header=TRUE)
Inverts <- read.csv(file="Data/Inverts.csv", stringsAsFactors=FALSE, header=TRUE)
Inverts %>% str()
Inverts %>% mutate(Type = as.factor(Type), Country = as.factor(Country)) %>% str
Inverts %>% str()
Inverts <- Inverts %>% mutate(Type = as.factor(Type), Country = as.factor(Country))
Inverts %>% str()
anove(Richness ~ Type, data=Inverts)
anova(Richness ~ Type, data=Inverts)
anova(InvertsType.mod)
InvertsType.mod <- aov(Richness ~ Type, data=Inverts)
anova(InvertsType.mod)
summary(InvertsType.mod)
Fundybirds
Fundybirds <- read.csv("Data/Fundybirds.csv")
Fundybirds
Fundybirds$ScientificName %>% table
Fundybirds %>% group_by(CommonName) %>% summarize(Count=length(CommonName))
Fundybirds
Fundybirds %>% group_by(CommonName, Hour) %>% summarize(Count=length(CommonName))
summary(aov(Count ~ Hour * CommonName, data=Fundybirds %>% group_by(CommonName, Hour) %>% summarize(Count=length(CommonName)) ))
birds_apr
birds_jan <- read.csv(file="Data/birds_jan")
birds_jan <- read.csv(file="Data/birds_jan.csv")
birds_feb <- read.csv(file="Data/birds_feb.csv")
birds_mra <- read.csv(file="Data/birds_mar.csv")
birds_mar <- read.csv(file="Data/birds_mar.csv")
birds_apr <- read.csv(file="Data/birds_apr.csv")
left_join(birds_jan,birds_feb, by="SpeciesNames")
?rename
birds_jan %>% rename(Jan = Count)
rename(birds_jan, Jan = Count)
birds_jan
left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds <- left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds
allbirds %>% gather(key="Month", value="Count")
allbirds
allbirds %>% gather(key="Month", value="Count", -SpeciesNames)
allbirds <- allbirds %>% gather(key="Month", value="Count", -SpeciesNames)
summary(aov(Count~Month, data=allbirds))
allbirds <- left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds
trees
summary(aov(Count~Species, data=trees))
summary(aov(Count~Site, data=trees))
summary(aov(Count~Site*Species, data=trees))
allbirds
summary(aov(Count~Species, data=trees))
r <- resid(aov(Count~Species, data=trees))
plot(aov(Count~Species, data=trees))
allbirds
filter(allbirds, Jan==NA)
filter(allbirds, is.na(Jan))
filter(allbirds, is.na(Jan))
filter(allbirds, is.na(Feb))
allbirds$Feb==NA
is.na(allbirds$Feb)
abs(rnorm(length(is.na(allbirds$Feb)), mean=20, sd=5))
length(is.na(allbirds$Feb))
is.na(allbirds$Feb)
is.na(allbirds$Feb)==TRUE
is.na(allbirds$Feb)
which(is.na(allbirds$Feb)==TRUE)
length(which(is.na(allbirds$Feb)==TRUE))
abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5))
allbirds$Feb[is.na(allbirds$Feb)] <- abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5))
allbirds
allbirds <- left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds %>% mutate(Feb[is.na(allbirds$Feb)]=abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5)))
allbirds %>% mutate( is.na(Feb) = abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5)))
allbirds %>% mutate( is.na(Feb) = 5)
allbirds$Feb[is.na(allbirds$Feb)] <- abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5))
allbirds$Mar[is.na(allbirds$Mar)] <- abs(rnorm( length(which(is.na(allbirds$Mar)==TRUE)) , mean=20, sd=5))
allbirds$Apr[is.na(allbirds$Apr)] <- abs(rnorm( length(which(is.na(allbirds$Apr)==TRUE)) , mean=20, sd=5))
allbirds
allbirds <- allbirds %>% gather(key="Month", value="Count", -SpeciesNames)
allbirds
allbirds <- left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds$Feb[is.na(allbirds$Feb)] <- abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5))
allbirds$Mar[is.na(allbirds$Mar)] <- abs(rnorm( length(which(is.na(allbirds$Mar)==TRUE)) , mean=20, sd=5))
allbirds$Apr[is.na(allbirds$Apr)] <- abs(rnorm( length(which(is.na(allbirds$Apr)==TRUE)) , mean=20, sd=5))
allbirds <- allbirds %>% gather(key="Month", value="Count", -SpeciesNames) %>%
round(Count,0)
allbirds <- allbirds %>% gather(key="Month", value="Count", -SpeciesNames) %>%
mutate(Count=round(Count,0))
allbirds
summary(aov(Count~Month, data=allbirds))
plot(Count~Month, data=allbirds)
boxplot(Count~Month, data=allbirds)
plot(Count~Month*Species, data=allbirds)
names(allbirds)
plot(Count~Month*SpeciesNames, data=allbirds)
boxplot(Count~Month*SpeciesNames, data=allbirds)
summary(aov(Count~Month*SpeciesNames, data=allbirds))
drop1(aov(Count~Month*SpeciesNames, data=allbirds))
allbirds <- left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds$Feb[is.na(allbirds$Feb)] <- abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5))
allbirds$Mar[is.na(allbirds$Mar)] <- abs(rnorm( length(which(is.na(allbirds$Mar)==TRUE)) , mean=20, sd=5))
allbirds$Apr[is.na(allbirds$Apr)] <- abs(rnorm( length(which(is.na(allbirds$Apr)==TRUE)) , mean=20, sd=5))
allbirds <- allbirds %>% gather(key="Month", value="Count", -SpeciesNames) %>%
mutate(Count=round(Count,0)) %>%
rename(Species=SpeciesNames)
allbirds
write.csv(allbirds, file="~/Documents/R/CREATE_R_Workshop/Data/allbirds.csv",row.names=FALSE)
allbirds <- left_join(rename(birds_jan, Jan = Count),rename(birds_feb, Feb = Count), by="SpeciesNames") %>%
left_join(rename(birds_mar, Mar = Count), by="SpeciesNames") %>%
left_join(rename(birds_apr, Apr = Count), by="SpeciesNames")
allbirds$Feb[is.na(allbirds$Feb)] <- abs(rnorm( length(which(is.na(allbirds$Feb)==TRUE)) , mean=20, sd=5))
allbirds$Mar[is.na(allbirds$Mar)] <- abs(rnorm( length(which(is.na(allbirds$Mar)==TRUE)) , mean=20, sd=5))
allbirds$Apr[is.na(allbirds$Apr)] <- abs(rnorm( length(which(is.na(allbirds$Apr)==TRUE)) , mean=20, sd=5))
allbirds
summary(aov(Count~Month*SpeciesNames, data=allbirds))
summary(aov(Count~Month+Species, data=allbirds))
allbirds <- allbirds %>% gather(key="Month", value="Count", -SpeciesNames) %>%
mutate(Count=round(Count,0)) %>%
rename(Species=SpeciesNames)
write.csv(allbirds, file="~/Documents/R/CREATE_R_Workshop/Data/allbirds.csv",row.names=FALSE)
summary(aov(Count~Month+Species, data=allbirds))
trees
summary(aov(Count~Species, data=trees))
plot(aov(Count~Species, data=trees))
plot(aov(log(Count)~Species, data=trees))
plot(aov(log(Count+1)~Species, data=trees))
plot(Count~Species, data=trees)
plot(Count~Species, data=allbirds) # No apparent differences...
allbirds <- read.csv(file="Data/allbirds.csv") # Read in file
allbirds
str(allbirds)
plot(Count~Month, data=allbirds) # No apparent differences...
summary(aov(Count~Month, data=allbirds)) # No significant differences
plot(aov(Count~Month, data=allbirds)) # Residuals look normal and homogeneous.
birdmod <- aov(Count~Month, data=allbirds) # Month is significant!
plot(birdmod) # Residuals look homogeneous and relatively normal (a few outliers).
TukeyHSD(birdmod)
trees <- read.csv(file="Data/trees.csv") # Read in file
plot(Count~Species, data=trees) # No apparent differences...
treemod <- aov(Count~Species, data=trees) # Fit model
summary(treemod) # No significant differences
allbirds <- read.csv(file="Data/allbirds.csv") # Read in file
plot(Count~Month, data=allbirds) # February looks a bit lower...
birdmod <- aov(Count~Month, data=allbirds) # Fit model
summary(birdmod) # Month is significant!
TukeyHSD(birdmod) # January and February are sig. different from each other.
plot(fitted(Inverts2.lm), resid(Inverts2.lm), pch=19, las=1)
fruitData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(8, 9, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(115, 125, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Pear", 100))
)
write.csv(fruitData, file="~Documents/R/CREATE_R_Workshop/Data/fruitData.csv",row.names=FALSE)
appleHeight <- jitter(seq(7, 8.5, length.out=100), amount=0.4)
# Apple weight in g
appleWeight <- jitter(seq(80, 100, length.out=100), amount=0.4)
# Apple and pear data
fruitData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(8, 9, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(115, 125, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Pear", 100))
)
write.csv(fruitData, file="~Documents/R/CREATE_R_Workshop/Data/fruitData.csv",row.names=FALSE)
appleHeight <- jitter(seq(7, 8.5, length.out=100), amount=0.4)
appleWeight <- jitter(seq(80, 100, length.out=100), amount=0.4)
fruitData <- data.frame(fruitHeight = c(appleHeight, jitter(seq(8, 9, length.out=100), amount=0.4)),
fruitWeight = c(appleWeight, jitter(seq(115, 125, length.out=100), amount=0.4)),
fruitType = c(rep("Apple", 100), rep("Pear", 100))
)
fruitData
write.csv(fruitData, file="~/Documents/R/CREATE_R_Workshop/Data/fruitData.csv",row.names=FALSE)
fruitData <- read.csv(file="Data/fruitData.csv")
head(fruitData)  # Take a look at the first 6 lines
plot(fruitData$fruitHeight, fruitData$fruitWeight)
runif(50)
?runif
xvalues <- runif(50, min=0, max=20)
yvalues <- xvalues/runif(50)
plot(xvalues, yvalues)
runif(50)
xvalues <- runif(50)
yvalues <- xvalues/runif(50)
plot(appleHeight, appleWeight)
plot(xvalues, yvalues)
xvalues <- runif(50)
yvalues <- xvalues/runif(50)
plot(xvalues, yvalues)
yvalues <- xvalues/0.5
plot(xvalues, yvalues)
yvalues <- xvalues/c(1:50)
plot(xvalues, yvalues)
xvalues <- runif(50)
yvalues <- xvalues/c(1:20)
xvalues <- runif(50)
yvalues <- xvalues/c(1:50)
plot(xvalues, yvalues)
# Create a vector of 50 random numbers
xvalues <- runif(50)
# Create a vector of 50 lower numbers
yvalues <- xvalues/c(1:50)
# Plot these vectors against each other
plot(xvalues, yvalues)
trees
metals
plot(Pb ~ Cu, data=metals)
plot(Pb ~ Fe, data=metals)
summary(lm(Pb ~ Fe, data=metals))
genes
metals <- read.csv(file="../Data/metals.csv")
# Make plots
plot(Pb ~ Cu, data=metals) # Lead versus copper
plot(Pb ~ Fe, data=metals) # Lead versus iron
str(fruitData)
?pdf
pdf(file="/Figures/test.pdf", height=11, width=8.5, pointsize=14)
setwd("~/Documents/R/CREATE_R_Workshop")
pdf(file="/Figures/test.pdf", height=11, width=8.5, pointsize=14)
pdf(file="Figures/test.pdf", height=11, width=8.5, pointsize=14)
par(mar=c(6,1,1,3))
plot(1, 1, pch=19, las=1)
dev.off()
pdf(file="Figures/test.pdf", height=11, width=8.5, pointsize=14)
par(omi=c(6,1,1,3), mar=c(3,3,1,1))
plot(1, 1, pch=19, las=1)
dev.off()
pdf(file="Figures/Nutrients.pdf", height=11, width=8.5, pointsize=12)
# Specify outer margins, plot margins, and plot layout
par(omi=c(7,0.5,1,1), mar=c(5,5,0,0), mfrow=c(1,2))
# Make ammonium plot
plot(100, 100, xlim=c(0,5), ylim=c(0, 14), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1, line=2)
axis(2, pos=0, las=1)
mtext(text=expression("Ammonium concentration ("*mu*"mol L"^"-1"*")"), side=2, line=2)
points(Ammonium ~ Nitrate, data=nutrients, pch=19, col="red")
# Make nitrite plot
plot(100, 100, xlim=c(0,5), ylim=c(0, 14), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1, line=2)
axis(2, pos=0, las=1)
mtext(text=expression("Nitrite concentration ("*mu*"mol L"^"-1"*")"), side=2, line=2)
points(Nitrite ~ Nitrate, data=nutrients, pch=19, col="blue")
dev.off()
nutrients <- read.csv(file="../Data/Experiment_nutrients.csv")
nutrients <- read.csv(file="Data/Experiment_nutrients.csv")
pdf(file="Figures/Nutrients.pdf", height=11, width=8.5, pointsize=12)
# Specify outer margins, plot margins, and plot layout
par(omi=c(7,0.5,1,1), mar=c(5,5,0,0), mfrow=c(1,2))
# Make ammonium plot
plot(100, 100, xlim=c(0,5), ylim=c(0, 14), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1, line=2)
axis(2, pos=0, las=1)
mtext(text=expression("Ammonium concentration ("*mu*"mol L"^"-1"*")"), side=2, line=2)
points(Ammonium ~ Nitrate, data=nutrients, pch=19, col="red")
# Make nitrite plot
plot(100, 100, xlim=c(0,5), ylim=c(0, 14), xlab="", ylab="", axes=FALSE)
axis(1, pos=0, las=1)
mtext(text=expression("Nitrate concentration ("*mu*"mol L"^"-1"*")"), side=1, line=2)
axis(2, pos=0, las=1)
mtext(text=expression("Nitrite concentration ("*mu*"mol L"^"-1"*")"), side=2, line=2)
points(Nitrite ~ Nitrate, data=nutrients, pch=19, col="blue")
dev.off()
find.package("devtools")
find.package("dplyr")
data(iris); library(ggplot2)
names(iris)
table(iris)
table(iris$Species)
str(iris)
library(caret)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
modFit <- train(Species ~ ., method="rpart", data=training)  # the method rpart is one of R's package to do regression and classification trees
install.packages('caret', dependencies = TRUE)
install.packages("caret", dependencies = TRUE)
library(caret)
data(iris); library(ggplot2)
names(iris)
table(iris$Species)
str(iris)
inTrain <- createDataPartition(y=iris$Species, p=0.7, list=FALSE)
training <- iris[inTrain,]
testing <- iris[-inTrain,]
dim(training); dim(testing)
qplot(Petal.Width, Sepal.Width, colour=Species, data=training)
library(caret)
modFit <- train(Species ~ ., method="rpart", data=training)  # the method rpart is one of R's package to do regression and classification trees
print(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n=TRUE, all=TRUE, cex=0.8)
library(rattle)
install.packages("rattle")
install.packages("rattle")
library(rattle)
library(rattle)
